// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hossein1376/kala/internal/ent/brand"
	"github.com/hossein1376/kala/internal/ent/category"
	"github.com/hossein1376/kala/internal/ent/image"
	"github.com/hossein1376/kala/internal/ent/product"
)

// BrandCreate is the builder for creating a Brand entity.
type BrandCreate struct {
	config
	mutation *BrandMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (bc *BrandCreate) SetCreateTime(t time.Time) *BrandCreate {
	bc.mutation.SetCreateTime(t)
	return bc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bc *BrandCreate) SetNillableCreateTime(t *time.Time) *BrandCreate {
	if t != nil {
		bc.SetCreateTime(*t)
	}
	return bc
}

// SetUpdateTime sets the "update_time" field.
func (bc *BrandCreate) SetUpdateTime(t time.Time) *BrandCreate {
	bc.mutation.SetUpdateTime(t)
	return bc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bc *BrandCreate) SetNillableUpdateTime(t *time.Time) *BrandCreate {
	if t != nil {
		bc.SetUpdateTime(*t)
	}
	return bc
}

// SetName sets the "name" field.
func (bc *BrandCreate) SetName(s string) *BrandCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetDescription sets the "description" field.
func (bc *BrandCreate) SetDescription(s string) *BrandCreate {
	bc.mutation.SetDescription(s)
	return bc
}

// SetStatus sets the "status" field.
func (bc *BrandCreate) SetStatus(b bool) *BrandCreate {
	bc.mutation.SetStatus(b)
	return bc
}

// SetRating sets the "rating" field.
func (bc *BrandCreate) SetRating(f float64) *BrandCreate {
	bc.mutation.SetRating(f)
	return bc
}

// SetRatingCount sets the "rating_count" field.
func (bc *BrandCreate) SetRatingCount(i int32) *BrandCreate {
	bc.mutation.SetRatingCount(i)
	return bc
}

// AddImageIDs adds the "image" edge to the Image entity by IDs.
func (bc *BrandCreate) AddImageIDs(ids ...int) *BrandCreate {
	bc.mutation.AddImageIDs(ids...)
	return bc
}

// AddImage adds the "image" edges to the Image entity.
func (bc *BrandCreate) AddImage(i ...*Image) *BrandCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return bc.AddImageIDs(ids...)
}

// AddCategoryIDs adds the "category" edge to the Category entity by IDs.
func (bc *BrandCreate) AddCategoryIDs(ids ...int) *BrandCreate {
	bc.mutation.AddCategoryIDs(ids...)
	return bc
}

// AddCategory adds the "category" edges to the Category entity.
func (bc *BrandCreate) AddCategory(c ...*Category) *BrandCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bc.AddCategoryIDs(ids...)
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (bc *BrandCreate) AddProductIDs(ids ...int) *BrandCreate {
	bc.mutation.AddProductIDs(ids...)
	return bc
}

// AddProduct adds the "product" edges to the Product entity.
func (bc *BrandCreate) AddProduct(p ...*Product) *BrandCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bc.AddProductIDs(ids...)
}

// Mutation returns the BrandMutation object of the builder.
func (bc *BrandCreate) Mutation() *BrandMutation {
	return bc.mutation
}

// Save creates the Brand in the database.
func (bc *BrandCreate) Save(ctx context.Context) (*Brand, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BrandCreate) SaveX(ctx context.Context) *Brand {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BrandCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BrandCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BrandCreate) defaults() {
	if _, ok := bc.mutation.CreateTime(); !ok {
		v := brand.DefaultCreateTime()
		bc.mutation.SetCreateTime(v)
	}
	if _, ok := bc.mutation.UpdateTime(); !ok {
		v := brand.DefaultUpdateTime()
		bc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BrandCreate) check() error {
	if _, ok := bc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Brand.create_time"`)}
	}
	if _, ok := bc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Brand.update_time"`)}
	}
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Brand.name"`)}
	}
	if _, ok := bc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Brand.description"`)}
	}
	if _, ok := bc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Brand.status"`)}
	}
	if _, ok := bc.mutation.Rating(); !ok {
		return &ValidationError{Name: "rating", err: errors.New(`ent: missing required field "Brand.rating"`)}
	}
	if _, ok := bc.mutation.RatingCount(); !ok {
		return &ValidationError{Name: "rating_count", err: errors.New(`ent: missing required field "Brand.rating_count"`)}
	}
	return nil
}

func (bc *BrandCreate) sqlSave(ctx context.Context) (*Brand, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BrandCreate) createSpec() (*Brand, *sqlgraph.CreateSpec) {
	var (
		_node = &Brand{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(brand.Table, sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt))
	)
	if value, ok := bc.mutation.CreateTime(); ok {
		_spec.SetField(brand.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := bc.mutation.UpdateTime(); ok {
		_spec.SetField(brand.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(brand.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bc.mutation.Description(); ok {
		_spec.SetField(brand.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(brand.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	if value, ok := bc.mutation.Rating(); ok {
		_spec.SetField(brand.FieldRating, field.TypeFloat64, value)
		_node.Rating = value
	}
	if value, ok := bc.mutation.RatingCount(); ok {
		_spec.SetField(brand.FieldRatingCount, field.TypeInt32, value)
		_node.RatingCount = value
	}
	if nodes := bc.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   brand.ImageTable,
			Columns: brand.ImagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   brand.CategoryTable,
			Columns: brand.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.ProductTable,
			Columns: []string{brand.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BrandCreateBulk is the builder for creating many Brand entities in bulk.
type BrandCreateBulk struct {
	config
	builders []*BrandCreate
}

// Save creates the Brand entities in the database.
func (bcb *BrandCreateBulk) Save(ctx context.Context) ([]*Brand, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Brand, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BrandMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BrandCreateBulk) SaveX(ctx context.Context) []*Brand {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BrandCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BrandCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
