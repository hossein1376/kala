// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AddressesColumns holds the columns for the "addresses" table.
	AddressesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "address", Type: field.TypeString},
		{Name: "zip_code", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
		{Name: "coordinates", Type: field.TypeString},
		{Name: "seller_address", Type: field.TypeInt, Nullable: true},
		{Name: "user", Type: field.TypeInt, Nullable: true},
	}
	// AddressesTable holds the schema information for the "addresses" table.
	AddressesTable = &schema.Table{
		Name:       "addresses",
		Columns:    AddressesColumns,
		PrimaryKey: []*schema.Column{AddressesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "addresses_sellers_address",
				Columns:    []*schema.Column{AddressesColumns[5]},
				RefColumns: []*schema.Column{SellersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "addresses_users_address",
				Columns:    []*schema.Column{AddressesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AttributesColumns holds the columns for the "attributes" table.
	AttributesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// AttributesTable holds the schema information for the "attributes" table.
	AttributesTable = &schema.Table{
		Name:       "attributes",
		Columns:    AttributesColumns,
		PrimaryKey: []*schema.Column{AttributesColumns[0]},
	}
	// AttributeValuesColumns holds the columns for the "attribute_values" table.
	AttributeValuesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "value", Type: field.TypeString},
		{Name: "attribute", Type: field.TypeInt},
		{Name: "product", Type: field.TypeInt},
	}
	// AttributeValuesTable holds the schema information for the "attribute_values" table.
	AttributeValuesTable = &schema.Table{
		Name:       "attribute_values",
		Columns:    AttributeValuesColumns,
		PrimaryKey: []*schema.Column{AttributeValuesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "attribute_values_attributes_values",
				Columns:    []*schema.Column{AttributeValuesColumns[2]},
				RefColumns: []*schema.Column{AttributesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "attribute_values_products_values",
				Columns:    []*schema.Column{AttributeValuesColumns[3]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BrandsColumns holds the columns for the "brands" table.
	BrandsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "status", Type: field.TypeBool},
		{Name: "rating", Type: field.TypeFloat64},
		{Name: "rating_count", Type: field.TypeInt32},
	}
	// BrandsTable holds the schema information for the "brands" table.
	BrandsTable = &schema.Table{
		Name:       "brands",
		Columns:    BrandsColumns,
		PrimaryKey: []*schema.Column{BrandsColumns[0]},
	}
	// CategoriesColumns holds the columns for the "categories" table.
	CategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
	}
	// CategoriesTable holds the schema information for the "categories" table.
	CategoriesTable = &schema.Table{
		Name:       "categories",
		Columns:    CategoriesColumns,
		PrimaryKey: []*schema.Column{CategoriesColumns[0]},
	}
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "content", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"published", "draft", "deleted"}, Default: "draft"},
		{Name: "likes", Type: field.TypeInt32, Default: 0},
		{Name: "dislikes", Type: field.TypeInt32, Default: 0},
		{Name: "rating", Type: field.TypeInt8, Default: 0},
		{Name: "rating_count", Type: field.TypeInt32},
		{Name: "verified_buyer", Type: field.TypeBool},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
	}
	// ConsColumns holds the columns for the "cons" table.
	ConsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "con", Type: field.TypeString},
		{Name: "comment", Type: field.TypeInt, Nullable: true},
	}
	// ConsTable holds the schema information for the "cons" table.
	ConsTable = &schema.Table{
		Name:       "cons",
		Columns:    ConsColumns,
		PrimaryKey: []*schema.Column{ConsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cons_comments_cons",
				Columns:    []*schema.Column{ConsColumns[2]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ImagesColumns holds the columns for the "images" table.
	ImagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "path", Type: field.TypeString},
		{Name: "caption", Type: field.TypeString, Nullable: true},
		{Name: "width", Type: field.TypeInt32},
		{Name: "high", Type: field.TypeInt32},
		{Name: "size_kb", Type: field.TypeFloat64},
		{Name: "uploaded_at", Type: field.TypeTime},
		{Name: "brand_image", Type: field.TypeInt, Nullable: true},
		{Name: "comment_image", Type: field.TypeInt, Nullable: true},
		{Name: "product_image", Type: field.TypeInt, Nullable: true},
		{Name: "user_image", Type: field.TypeInt, Nullable: true},
	}
	// ImagesTable holds the schema information for the "images" table.
	ImagesTable = &schema.Table{
		Name:       "images",
		Columns:    ImagesColumns,
		PrimaryKey: []*schema.Column{ImagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "images_brands_image",
				Columns:    []*schema.Column{ImagesColumns[8]},
				RefColumns: []*schema.Column{BrandsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "images_comments_image",
				Columns:    []*schema.Column{ImagesColumns[9]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "images_products_image",
				Columns:    []*schema.Column{ImagesColumns[10]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "images_users_image",
				Columns:    []*schema.Column{ImagesColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// LogsColumns holds the columns for the "logs" table.
	LogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "action", Type: field.TypeString, Nullable: true},
		{Name: "ip", Type: field.TypeString},
		{Name: "agent", Type: field.TypeString},
		{Name: "date", Type: field.TypeTime},
		{Name: "user", Type: field.TypeInt, Nullable: true},
	}
	// LogsTable holds the schema information for the "logs" table.
	LogsTable = &schema.Table{
		Name:       "logs",
		Columns:    LogsColumns,
		PrimaryKey: []*schema.Column{LogsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "logs_users_logs",
				Columns:    []*schema.Column{LogsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrdersColumns holds the columns for the "orders" table.
	OrdersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "user_order", Type: field.TypeInt},
	}
	// OrdersTable holds the schema information for the "orders" table.
	OrdersTable = &schema.Table{
		Name:       "orders",
		Columns:    OrdersColumns,
		PrimaryKey: []*schema.Column{OrdersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "orders_users_order",
				Columns:    []*schema.Column{OrdersColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ProductsColumns holds the columns for the "products" table.
	ProductsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "review", Type: field.TypeString, Size: 2147483647},
		{Name: "rating", Type: field.TypeFloat64},
		{Name: "rating_count", Type: field.TypeInt32},
		{Name: "price", Type: field.TypeInt32},
		{Name: "quantity", Type: field.TypeInt32},
		{Name: "available", Type: field.TypeBool},
		{Name: "brand_product", Type: field.TypeInt, Nullable: true},
		{Name: "seller_product", Type: field.TypeInt, Nullable: true},
	}
	// ProductsTable holds the schema information for the "products" table.
	ProductsTable = &schema.Table{
		Name:       "products",
		Columns:    ProductsColumns,
		PrimaryKey: []*schema.Column{ProductsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "products_brands_product",
				Columns:    []*schema.Column{ProductsColumns[11]},
				RefColumns: []*schema.Column{BrandsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "products_sellers_product",
				Columns:    []*schema.Column{ProductsColumns[12]},
				RefColumns: []*schema.Column{SellersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProsColumns holds the columns for the "pros" table.
	ProsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "pro", Type: field.TypeString},
		{Name: "comment", Type: field.TypeInt, Nullable: true},
	}
	// ProsTable holds the schema information for the "pros" table.
	ProsTable = &schema.Table{
		Name:       "pros",
		Columns:    ProsColumns,
		PrimaryKey: []*schema.Column{ProsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "pros_comments_pros",
				Columns:    []*schema.Column{ProsColumns[2]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SellersColumns holds the columns for the "sellers" table.
	SellersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "rating", Type: field.TypeFloat64},
		{Name: "rating_count", Type: field.TypeInt32},
		{Name: "phone", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// SellersTable holds the schema information for the "sellers" table.
	SellersTable = &schema.Table{
		Name:       "sellers",
		Columns:    SellersColumns,
		PrimaryKey: []*schema.Column{SellersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sellers_users_seller",
				Columns:    []*schema.Column{SellersColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SubCategoriesColumns holds the columns for the "sub_categories" table.
	SubCategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "category", Type: field.TypeInt, Nullable: true},
	}
	// SubCategoriesTable holds the schema information for the "sub_categories" table.
	SubCategoriesTable = &schema.Table{
		Name:       "sub_categories",
		Columns:    SubCategoriesColumns,
		PrimaryKey: []*schema.Column{SubCategoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sub_categories_categories_sub_category",
				Columns:    []*schema.Column{SubCategoriesColumns[5]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeBytes},
		{Name: "first_name", Type: field.TypeString, Nullable: true},
		{Name: "last_name", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "phone", Type: field.TypeString, Nullable: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"admin", "seller", "user"}, Default: "user"},
		{Name: "status", Type: field.TypeBool, Default: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// BrandCategoryColumns holds the columns for the "brand_category" table.
	BrandCategoryColumns = []*schema.Column{
		{Name: "brand_id", Type: field.TypeInt},
		{Name: "category_id", Type: field.TypeInt},
	}
	// BrandCategoryTable holds the schema information for the "brand_category" table.
	BrandCategoryTable = &schema.Table{
		Name:       "brand_category",
		Columns:    BrandCategoryColumns,
		PrimaryKey: []*schema.Column{BrandCategoryColumns[0], BrandCategoryColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "brand_category_brand_id",
				Columns:    []*schema.Column{BrandCategoryColumns[0]},
				RefColumns: []*schema.Column{BrandsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "brand_category_category_id",
				Columns:    []*schema.Column{BrandCategoryColumns[1]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProductCommentsColumns holds the columns for the "product_comments" table.
	ProductCommentsColumns = []*schema.Column{
		{Name: "product_id", Type: field.TypeInt},
		{Name: "comment_id", Type: field.TypeInt},
	}
	// ProductCommentsTable holds the schema information for the "product_comments" table.
	ProductCommentsTable = &schema.Table{
		Name:       "product_comments",
		Columns:    ProductCommentsColumns,
		PrimaryKey: []*schema.Column{ProductCommentsColumns[0], ProductCommentsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "product_comments_product_id",
				Columns:    []*schema.Column{ProductCommentsColumns[0]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "product_comments_comment_id",
				Columns:    []*schema.Column{ProductCommentsColumns[1]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProductOrderColumns holds the columns for the "product_order" table.
	ProductOrderColumns = []*schema.Column{
		{Name: "product_id", Type: field.TypeInt},
		{Name: "order_id", Type: field.TypeInt},
	}
	// ProductOrderTable holds the schema information for the "product_order" table.
	ProductOrderTable = &schema.Table{
		Name:       "product_order",
		Columns:    ProductOrderColumns,
		PrimaryKey: []*schema.Column{ProductOrderColumns[0], ProductOrderColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "product_order_product_id",
				Columns:    []*schema.Column{ProductOrderColumns[0]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "product_order_order_id",
				Columns:    []*schema.Column{ProductOrderColumns[1]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// SellerCategoryColumns holds the columns for the "seller_category" table.
	SellerCategoryColumns = []*schema.Column{
		{Name: "seller_id", Type: field.TypeInt},
		{Name: "category_id", Type: field.TypeInt},
	}
	// SellerCategoryTable holds the schema information for the "seller_category" table.
	SellerCategoryTable = &schema.Table{
		Name:       "seller_category",
		Columns:    SellerCategoryColumns,
		PrimaryKey: []*schema.Column{SellerCategoryColumns[0], SellerCategoryColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "seller_category_seller_id",
				Columns:    []*schema.Column{SellerCategoryColumns[0]},
				RefColumns: []*schema.Column{SellersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "seller_category_category_id",
				Columns:    []*schema.Column{SellerCategoryColumns[1]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserCommentsColumns holds the columns for the "user_comments" table.
	UserCommentsColumns = []*schema.Column{
		{Name: "user", Type: field.TypeInt},
		{Name: "comment", Type: field.TypeInt},
	}
	// UserCommentsTable holds the schema information for the "user_comments" table.
	UserCommentsTable = &schema.Table{
		Name:       "user_comments",
		Columns:    UserCommentsColumns,
		PrimaryKey: []*schema.Column{UserCommentsColumns[0], UserCommentsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_id",
				Columns:    []*schema.Column{UserCommentsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "comment_id",
				Columns:    []*schema.Column{UserCommentsColumns[1]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AddressesTable,
		AttributesTable,
		AttributeValuesTable,
		BrandsTable,
		CategoriesTable,
		CommentsTable,
		ConsTable,
		ImagesTable,
		LogsTable,
		OrdersTable,
		ProductsTable,
		ProsTable,
		SellersTable,
		SubCategoriesTable,
		UsersTable,
		BrandCategoryTable,
		ProductCommentsTable,
		ProductOrderTable,
		SellerCategoryTable,
		UserCommentsTable,
	}
)

func init() {
	AddressesTable.ForeignKeys[0].RefTable = SellersTable
	AddressesTable.ForeignKeys[1].RefTable = UsersTable
	AttributeValuesTable.ForeignKeys[0].RefTable = AttributesTable
	AttributeValuesTable.ForeignKeys[1].RefTable = ProductsTable
	ConsTable.ForeignKeys[0].RefTable = CommentsTable
	ImagesTable.ForeignKeys[0].RefTable = BrandsTable
	ImagesTable.ForeignKeys[1].RefTable = CommentsTable
	ImagesTable.ForeignKeys[2].RefTable = ProductsTable
	ImagesTable.ForeignKeys[3].RefTable = UsersTable
	LogsTable.ForeignKeys[0].RefTable = UsersTable
	OrdersTable.ForeignKeys[0].RefTable = UsersTable
	ProductsTable.ForeignKeys[0].RefTable = BrandsTable
	ProductsTable.ForeignKeys[1].RefTable = SellersTable
	ProsTable.ForeignKeys[0].RefTable = CommentsTable
	SellersTable.ForeignKeys[0].RefTable = UsersTable
	SubCategoriesTable.ForeignKeys[0].RefTable = CategoriesTable
	BrandCategoryTable.ForeignKeys[0].RefTable = BrandsTable
	BrandCategoryTable.ForeignKeys[1].RefTable = CategoriesTable
	ProductCommentsTable.ForeignKeys[0].RefTable = ProductsTable
	ProductCommentsTable.ForeignKeys[1].RefTable = CommentsTable
	ProductOrderTable.ForeignKeys[0].RefTable = ProductsTable
	ProductOrderTable.ForeignKeys[1].RefTable = OrdersTable
	SellerCategoryTable.ForeignKeys[0].RefTable = SellersTable
	SellerCategoryTable.ForeignKeys[1].RefTable = CategoriesTable
	UserCommentsTable.ForeignKeys[0].RefTable = UsersTable
	UserCommentsTable.ForeignKeys[1].RefTable = CommentsTable
}
