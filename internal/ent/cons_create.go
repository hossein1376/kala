// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hossein1376/kala/internal/ent/comment"
	"github.com/hossein1376/kala/internal/ent/cons"
)

// ConsCreate is the builder for creating a Cons entity.
type ConsCreate struct {
	config
	mutation *ConsMutation
	hooks    []Hook
}

// SetCon sets the "con" field.
func (cc *ConsCreate) SetCon(s string) *ConsCreate {
	cc.mutation.SetCon(s)
	return cc
}

// SetCommentID sets the "comment" edge to the Comment entity by ID.
func (cc *ConsCreate) SetCommentID(id int) *ConsCreate {
	cc.mutation.SetCommentID(id)
	return cc
}

// SetNillableCommentID sets the "comment" edge to the Comment entity by ID if the given value is not nil.
func (cc *ConsCreate) SetNillableCommentID(id *int) *ConsCreate {
	if id != nil {
		cc = cc.SetCommentID(*id)
	}
	return cc
}

// SetComment sets the "comment" edge to the Comment entity.
func (cc *ConsCreate) SetComment(c *Comment) *ConsCreate {
	return cc.SetCommentID(c.ID)
}

// Mutation returns the ConsMutation object of the builder.
func (cc *ConsCreate) Mutation() *ConsMutation {
	return cc.mutation
}

// Save creates the Cons in the database.
func (cc *ConsCreate) Save(ctx context.Context) (*Cons, error) {
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConsCreate) SaveX(ctx context.Context) *Cons {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ConsCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ConsCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConsCreate) check() error {
	if _, ok := cc.mutation.Con(); !ok {
		return &ValidationError{Name: "con", err: errors.New(`ent: missing required field "Cons.con"`)}
	}
	if v, ok := cc.mutation.Con(); ok {
		if err := cons.ConValidator(v); err != nil {
			return &ValidationError{Name: "con", err: fmt.Errorf(`ent: validator failed for field "Cons.con": %w`, err)}
		}
	}
	return nil
}

func (cc *ConsCreate) sqlSave(ctx context.Context) (*Cons, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ConsCreate) createSpec() (*Cons, *sqlgraph.CreateSpec) {
	var (
		_node = &Cons{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(cons.Table, sqlgraph.NewFieldSpec(cons.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.Con(); ok {
		_spec.SetField(cons.FieldCon, field.TypeString, value)
		_node.Con = value
	}
	if nodes := cc.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cons.CommentTable,
			Columns: []string{cons.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.comment = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ConsCreateBulk is the builder for creating many Cons entities in bulk.
type ConsCreateBulk struct {
	config
	builders []*ConsCreate
}

// Save creates the Cons entities in the database.
func (ccb *ConsCreateBulk) Save(ctx context.Context) ([]*Cons, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cons, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConsCreateBulk) SaveX(ctx context.Context) []*Cons {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ConsCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ConsCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
