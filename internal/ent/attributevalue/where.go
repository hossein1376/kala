// Code generated by ent, DO NOT EDIT.

package attributevalue

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hossein1376/kala/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldLTE(FieldID, id))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldEQ(FieldValue, v))
}

// Attribute applies equality check predicate on the "attribute" field. It's identical to AttributeEQ.
func Attribute(v int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldEQ(FieldAttribute, v))
}

// Product applies equality check predicate on the "product" field. It's identical to ProductEQ.
func Product(v int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldEQ(FieldProduct, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldContainsFold(FieldValue, v))
}

// AttributeEQ applies the EQ predicate on the "attribute" field.
func AttributeEQ(v int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldEQ(FieldAttribute, v))
}

// AttributeNEQ applies the NEQ predicate on the "attribute" field.
func AttributeNEQ(v int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldNEQ(FieldAttribute, v))
}

// AttributeIn applies the In predicate on the "attribute" field.
func AttributeIn(vs ...int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldIn(FieldAttribute, vs...))
}

// AttributeNotIn applies the NotIn predicate on the "attribute" field.
func AttributeNotIn(vs ...int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldNotIn(FieldAttribute, vs...))
}

// ProductEQ applies the EQ predicate on the "product" field.
func ProductEQ(v int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldEQ(FieldProduct, v))
}

// ProductNEQ applies the NEQ predicate on the "product" field.
func ProductNEQ(v int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldNEQ(FieldProduct, v))
}

// ProductIn applies the In predicate on the "product" field.
func ProductIn(vs ...int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldIn(FieldProduct, vs...))
}

// ProductNotIn applies the NotIn predicate on the "product" field.
func ProductNotIn(vs ...int) predicate.AttributeValue {
	return predicate.AttributeValue(sql.FieldNotIn(FieldProduct, vs...))
}

// HasAttributes applies the HasEdge predicate on the "attributes" edge.
func HasAttributes() predicate.AttributeValue {
	return predicate.AttributeValue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AttributesTable, AttributesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttributesWith applies the HasEdge predicate on the "attributes" edge with a given conditions (other predicates).
func HasAttributesWith(preds ...predicate.Attribute) predicate.AttributeValue {
	return predicate.AttributeValue(func(s *sql.Selector) {
		step := newAttributesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProducts applies the HasEdge predicate on the "products" edge.
func HasProducts() predicate.AttributeValue {
	return predicate.AttributeValue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductsTable, ProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductsWith applies the HasEdge predicate on the "products" edge with a given conditions (other predicates).
func HasProductsWith(preds ...predicate.Product) predicate.AttributeValue {
	return predicate.AttributeValue(func(s *sql.Selector) {
		step := newProductsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AttributeValue) predicate.AttributeValue {
	return predicate.AttributeValue(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AttributeValue) predicate.AttributeValue {
	return predicate.AttributeValue(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AttributeValue) predicate.AttributeValue {
	return predicate.AttributeValue(func(s *sql.Selector) {
		p(s.Not())
	})
}
