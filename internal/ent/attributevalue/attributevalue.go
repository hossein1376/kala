// Code generated by ent, DO NOT EDIT.

package attributevalue

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the attributevalue type in the database.
	Label = "attribute_value"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldAttribute holds the string denoting the attribute field in the database.
	FieldAttribute = "attribute"
	// FieldProduct holds the string denoting the product field in the database.
	FieldProduct = "product"
	// EdgeAttributes holds the string denoting the attributes edge name in mutations.
	EdgeAttributes = "attributes"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// Table holds the table name of the attributevalue in the database.
	Table = "attribute_values"
	// AttributesTable is the table that holds the attributes relation/edge.
	AttributesTable = "attribute_values"
	// AttributesInverseTable is the table name for the Attribute entity.
	// It exists in this package in order to avoid circular dependency with the "attribute" package.
	AttributesInverseTable = "attributes"
	// AttributesColumn is the table column denoting the attributes relation/edge.
	AttributesColumn = "attribute"
	// ProductsTable is the table that holds the products relation/edge.
	ProductsTable = "attribute_values"
	// ProductsInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductsInverseTable = "products"
	// ProductsColumn is the table column denoting the products relation/edge.
	ProductsColumn = "product"
)

// Columns holds all SQL columns for attributevalue fields.
var Columns = []string{
	FieldID,
	FieldValue,
	FieldAttribute,
	FieldProduct,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ValueValidator is a validator for the "value" field. It is called by the builders before save.
	ValueValidator func(string) error
)

// OrderOption defines the ordering options for the AttributeValue queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByAttribute orders the results by the attribute field.
func ByAttribute(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttribute, opts...).ToFunc()
}

// ByProduct orders the results by the product field.
func ByProduct(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProduct, opts...).ToFunc()
}

// ByAttributesField orders the results by attributes field.
func ByAttributesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttributesStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductsField orders the results by products field.
func ByProductsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductsStep(), sql.OrderByField(field, opts...))
	}
}
func newAttributesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttributesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AttributesTable, AttributesColumn),
	)
}
func newProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductsTable, ProductsColumn),
	)
}
