// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kala/internal/ent/category"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Category is the model entity for the Category schema.
type Category struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CategoryQuery when eager-loading is set.
	Edges        CategoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CategoryEdges holds the relations/edges for other nodes in the graph.
type CategoryEdges struct {
	// SubCategory holds the value of the sub_category edge.
	SubCategory []*SubCategory `json:"sub_category,omitempty"`
	// Image holds the value of the image edge.
	Image []*Image `json:"image,omitempty"`
	// Product holds the value of the product edge.
	Product []*Product `json:"product,omitempty"`
	// Brand holds the value of the brand edge.
	Brand []*Brand `json:"brand,omitempty"`
	// Seller holds the value of the seller edge.
	Seller []*Seller `json:"seller,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// SubCategoryOrErr returns the SubCategory value or an error if the edge
// was not loaded in eager-loading.
func (e CategoryEdges) SubCategoryOrErr() ([]*SubCategory, error) {
	if e.loadedTypes[0] {
		return e.SubCategory, nil
	}
	return nil, &NotLoadedError{edge: "sub_category"}
}

// ImageOrErr returns the Image value or an error if the edge
// was not loaded in eager-loading.
func (e CategoryEdges) ImageOrErr() ([]*Image, error) {
	if e.loadedTypes[1] {
		return e.Image, nil
	}
	return nil, &NotLoadedError{edge: "image"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading.
func (e CategoryEdges) ProductOrErr() ([]*Product, error) {
	if e.loadedTypes[2] {
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// BrandOrErr returns the Brand value or an error if the edge
// was not loaded in eager-loading.
func (e CategoryEdges) BrandOrErr() ([]*Brand, error) {
	if e.loadedTypes[3] {
		return e.Brand, nil
	}
	return nil, &NotLoadedError{edge: "brand"}
}

// SellerOrErr returns the Seller value or an error if the edge
// was not loaded in eager-loading.
func (e CategoryEdges) SellerOrErr() ([]*Seller, error) {
	if e.loadedTypes[4] {
		return e.Seller, nil
	}
	return nil, &NotLoadedError{edge: "seller"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Category) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case category.FieldID:
			values[i] = new(sql.NullInt64)
		case category.FieldName, category.FieldDescription:
			values[i] = new(sql.NullString)
		case category.FieldCreateTime, category.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Category fields.
func (c *Category) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case category.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case category.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case category.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case category.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case category.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Category.
// This includes values selected through modifiers, order, etc.
func (c *Category) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QuerySubCategory queries the "sub_category" edge of the Category entity.
func (c *Category) QuerySubCategory() *SubCategoryQuery {
	return NewCategoryClient(c.config).QuerySubCategory(c)
}

// QueryImage queries the "image" edge of the Category entity.
func (c *Category) QueryImage() *ImageQuery {
	return NewCategoryClient(c.config).QueryImage(c)
}

// QueryProduct queries the "product" edge of the Category entity.
func (c *Category) QueryProduct() *ProductQuery {
	return NewCategoryClient(c.config).QueryProduct(c)
}

// QueryBrand queries the "brand" edge of the Category entity.
func (c *Category) QueryBrand() *BrandQuery {
	return NewCategoryClient(c.config).QueryBrand(c)
}

// QuerySeller queries the "seller" edge of the Category entity.
func (c *Category) QuerySeller() *SellerQuery {
	return NewCategoryClient(c.config).QuerySeller(c)
}

// Update returns a builder for updating this Category.
// Note that you need to call Category.Unwrap() before calling this method if this Category
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Category) Update() *CategoryUpdateOne {
	return NewCategoryClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Category entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Category) Unwrap() *Category {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Category is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Category) String() string {
	var builder strings.Builder
	builder.WriteString("Category(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Categories is a parsable slice of Category.
type Categories []*Category
