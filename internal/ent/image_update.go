// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kala/internal/ent/brand"
	"kala/internal/ent/category"
	"kala/internal/ent/comment"
	"kala/internal/ent/image"
	"kala/internal/ent/predicate"
	"kala/internal/ent/product"
	"kala/internal/ent/subcategory"
	"kala/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageUpdate is the builder for updating Image entities.
type ImageUpdate struct {
	config
	hooks    []Hook
	mutation *ImageMutation
}

// Where appends a list predicates to the ImageUpdate builder.
func (iu *ImageUpdate) Where(ps ...predicate.Image) *ImageUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *ImageUpdate) SetName(s string) *ImageUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetPath sets the "path" field.
func (iu *ImageUpdate) SetPath(s string) *ImageUpdate {
	iu.mutation.SetPath(s)
	return iu
}

// SetCaption sets the "caption" field.
func (iu *ImageUpdate) SetCaption(s string) *ImageUpdate {
	iu.mutation.SetCaption(s)
	return iu
}

// SetNillableCaption sets the "caption" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableCaption(s *string) *ImageUpdate {
	if s != nil {
		iu.SetCaption(*s)
	}
	return iu
}

// ClearCaption clears the value of the "caption" field.
func (iu *ImageUpdate) ClearCaption() *ImageUpdate {
	iu.mutation.ClearCaption()
	return iu
}

// SetWidth sets the "width" field.
func (iu *ImageUpdate) SetWidth(i int32) *ImageUpdate {
	iu.mutation.ResetWidth()
	iu.mutation.SetWidth(i)
	return iu
}

// AddWidth adds i to the "width" field.
func (iu *ImageUpdate) AddWidth(i int32) *ImageUpdate {
	iu.mutation.AddWidth(i)
	return iu
}

// SetHigh sets the "high" field.
func (iu *ImageUpdate) SetHigh(i int32) *ImageUpdate {
	iu.mutation.ResetHigh()
	iu.mutation.SetHigh(i)
	return iu
}

// AddHigh adds i to the "high" field.
func (iu *ImageUpdate) AddHigh(i int32) *ImageUpdate {
	iu.mutation.AddHigh(i)
	return iu
}

// SetSizeKB sets the "size_kb" field.
func (iu *ImageUpdate) SetSizeKB(f float64) *ImageUpdate {
	iu.mutation.ResetSizeKB()
	iu.mutation.SetSizeKB(f)
	return iu
}

// AddSizeKB adds f to the "size_kb" field.
func (iu *ImageUpdate) AddSizeKB(f float64) *ImageUpdate {
	iu.mutation.AddSizeKB(f)
	return iu
}

// SetUploadedAt sets the "uploaded_at" field.
func (iu *ImageUpdate) SetUploadedAt(t time.Time) *ImageUpdate {
	iu.mutation.SetUploadedAt(t)
	return iu
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (iu *ImageUpdate) AddUserIDs(ids ...int) *ImageUpdate {
	iu.mutation.AddUserIDs(ids...)
	return iu
}

// AddUser adds the "user" edges to the User entity.
func (iu *ImageUpdate) AddUser(u ...*User) *ImageUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iu.AddUserIDs(ids...)
}

// AddCommentIDs adds the "comment" edge to the Comment entity by IDs.
func (iu *ImageUpdate) AddCommentIDs(ids ...int) *ImageUpdate {
	iu.mutation.AddCommentIDs(ids...)
	return iu
}

// AddComment adds the "comment" edges to the Comment entity.
func (iu *ImageUpdate) AddComment(c ...*Comment) *ImageUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iu.AddCommentIDs(ids...)
}

// AddBrandIDs adds the "brand" edge to the Brand entity by IDs.
func (iu *ImageUpdate) AddBrandIDs(ids ...int) *ImageUpdate {
	iu.mutation.AddBrandIDs(ids...)
	return iu
}

// AddBrand adds the "brand" edges to the Brand entity.
func (iu *ImageUpdate) AddBrand(b ...*Brand) *ImageUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iu.AddBrandIDs(ids...)
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (iu *ImageUpdate) AddProductIDs(ids ...int) *ImageUpdate {
	iu.mutation.AddProductIDs(ids...)
	return iu
}

// AddProduct adds the "product" edges to the Product entity.
func (iu *ImageUpdate) AddProduct(p ...*Product) *ImageUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iu.AddProductIDs(ids...)
}

// AddCategoryIDs adds the "category" edge to the Category entity by IDs.
func (iu *ImageUpdate) AddCategoryIDs(ids ...int) *ImageUpdate {
	iu.mutation.AddCategoryIDs(ids...)
	return iu
}

// AddCategory adds the "category" edges to the Category entity.
func (iu *ImageUpdate) AddCategory(c ...*Category) *ImageUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iu.AddCategoryIDs(ids...)
}

// AddSubCategoryIDs adds the "sub_category" edge to the SubCategory entity by IDs.
func (iu *ImageUpdate) AddSubCategoryIDs(ids ...int) *ImageUpdate {
	iu.mutation.AddSubCategoryIDs(ids...)
	return iu
}

// AddSubCategory adds the "sub_category" edges to the SubCategory entity.
func (iu *ImageUpdate) AddSubCategory(s ...*SubCategory) *ImageUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iu.AddSubCategoryIDs(ids...)
}

// Mutation returns the ImageMutation object of the builder.
func (iu *ImageUpdate) Mutation() *ImageMutation {
	return iu.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (iu *ImageUpdate) ClearUser() *ImageUpdate {
	iu.mutation.ClearUser()
	return iu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (iu *ImageUpdate) RemoveUserIDs(ids ...int) *ImageUpdate {
	iu.mutation.RemoveUserIDs(ids...)
	return iu
}

// RemoveUser removes "user" edges to User entities.
func (iu *ImageUpdate) RemoveUser(u ...*User) *ImageUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iu.RemoveUserIDs(ids...)
}

// ClearComment clears all "comment" edges to the Comment entity.
func (iu *ImageUpdate) ClearComment() *ImageUpdate {
	iu.mutation.ClearComment()
	return iu
}

// RemoveCommentIDs removes the "comment" edge to Comment entities by IDs.
func (iu *ImageUpdate) RemoveCommentIDs(ids ...int) *ImageUpdate {
	iu.mutation.RemoveCommentIDs(ids...)
	return iu
}

// RemoveComment removes "comment" edges to Comment entities.
func (iu *ImageUpdate) RemoveComment(c ...*Comment) *ImageUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iu.RemoveCommentIDs(ids...)
}

// ClearBrand clears all "brand" edges to the Brand entity.
func (iu *ImageUpdate) ClearBrand() *ImageUpdate {
	iu.mutation.ClearBrand()
	return iu
}

// RemoveBrandIDs removes the "brand" edge to Brand entities by IDs.
func (iu *ImageUpdate) RemoveBrandIDs(ids ...int) *ImageUpdate {
	iu.mutation.RemoveBrandIDs(ids...)
	return iu
}

// RemoveBrand removes "brand" edges to Brand entities.
func (iu *ImageUpdate) RemoveBrand(b ...*Brand) *ImageUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iu.RemoveBrandIDs(ids...)
}

// ClearProduct clears all "product" edges to the Product entity.
func (iu *ImageUpdate) ClearProduct() *ImageUpdate {
	iu.mutation.ClearProduct()
	return iu
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (iu *ImageUpdate) RemoveProductIDs(ids ...int) *ImageUpdate {
	iu.mutation.RemoveProductIDs(ids...)
	return iu
}

// RemoveProduct removes "product" edges to Product entities.
func (iu *ImageUpdate) RemoveProduct(p ...*Product) *ImageUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iu.RemoveProductIDs(ids...)
}

// ClearCategory clears all "category" edges to the Category entity.
func (iu *ImageUpdate) ClearCategory() *ImageUpdate {
	iu.mutation.ClearCategory()
	return iu
}

// RemoveCategoryIDs removes the "category" edge to Category entities by IDs.
func (iu *ImageUpdate) RemoveCategoryIDs(ids ...int) *ImageUpdate {
	iu.mutation.RemoveCategoryIDs(ids...)
	return iu
}

// RemoveCategory removes "category" edges to Category entities.
func (iu *ImageUpdate) RemoveCategory(c ...*Category) *ImageUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iu.RemoveCategoryIDs(ids...)
}

// ClearSubCategory clears all "sub_category" edges to the SubCategory entity.
func (iu *ImageUpdate) ClearSubCategory() *ImageUpdate {
	iu.mutation.ClearSubCategory()
	return iu
}

// RemoveSubCategoryIDs removes the "sub_category" edge to SubCategory entities by IDs.
func (iu *ImageUpdate) RemoveSubCategoryIDs(ids ...int) *ImageUpdate {
	iu.mutation.RemoveSubCategoryIDs(ids...)
	return iu
}

// RemoveSubCategory removes "sub_category" edges to SubCategory entities.
func (iu *ImageUpdate) RemoveSubCategory(s ...*SubCategory) *ImageUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iu.RemoveSubCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ImageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ImageUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ImageUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ImageUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *ImageUpdate) check() error {
	if v, ok := iu.mutation.Name(); ok {
		if err := image.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Image.name": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Path(); ok {
		if err := image.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Image.path": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Width(); ok {
		if err := image.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "Image.width": %w`, err)}
		}
	}
	if v, ok := iu.mutation.High(); ok {
		if err := image.HighValidator(v); err != nil {
			return &ValidationError{Name: "high", err: fmt.Errorf(`ent: validator failed for field "Image.high": %w`, err)}
		}
	}
	if v, ok := iu.mutation.SizeKB(); ok {
		if err := image.SizeKBValidator(v); err != nil {
			return &ValidationError{Name: "size_kb", err: fmt.Errorf(`ent: validator failed for field "Image.size_kb": %w`, err)}
		}
	}
	return nil
}

func (iu *ImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(image.Table, image.Columns, sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(image.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Path(); ok {
		_spec.SetField(image.FieldPath, field.TypeString, value)
	}
	if value, ok := iu.mutation.Caption(); ok {
		_spec.SetField(image.FieldCaption, field.TypeString, value)
	}
	if iu.mutation.CaptionCleared() {
		_spec.ClearField(image.FieldCaption, field.TypeString)
	}
	if value, ok := iu.mutation.Width(); ok {
		_spec.SetField(image.FieldWidth, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedWidth(); ok {
		_spec.AddField(image.FieldWidth, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.High(); ok {
		_spec.SetField(image.FieldHigh, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedHigh(); ok {
		_spec.AddField(image.FieldHigh, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.SizeKB(); ok {
		_spec.SetField(image.FieldSizeKB, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedSizeKB(); ok {
		_spec.AddField(image.FieldSizeKB, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.UploadedAt(); ok {
		_spec.SetField(image.FieldUploadedAt, field.TypeTime, value)
	}
	if iu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.UserTable,
			Columns: image.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedUserIDs(); len(nodes) > 0 && !iu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.UserTable,
			Columns: image.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.UserTable,
			Columns: image.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.CommentTable,
			Columns: image.CommentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedCommentIDs(); len(nodes) > 0 && !iu.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.CommentTable,
			Columns: image.CommentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.CommentTable,
			Columns: image.CommentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.BrandTable,
			Columns: image.BrandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedBrandIDs(); len(nodes) > 0 && !iu.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.BrandTable,
			Columns: image.BrandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.BrandTable,
			Columns: image.BrandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ProductTable,
			Columns: image.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedProductIDs(); len(nodes) > 0 && !iu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ProductTable,
			Columns: image.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ProductTable,
			Columns: image.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.CategoryTable,
			Columns: image.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedCategoryIDs(); len(nodes) > 0 && !iu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.CategoryTable,
			Columns: image.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.CategoryTable,
			Columns: image.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.SubCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.SubCategoryTable,
			Columns: image.SubCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedSubCategoryIDs(); len(nodes) > 0 && !iu.mutation.SubCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.SubCategoryTable,
			Columns: image.SubCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.SubCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.SubCategoryTable,
			Columns: image.SubCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{image.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// ImageUpdateOne is the builder for updating a single Image entity.
type ImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageMutation
}

// SetName sets the "name" field.
func (iuo *ImageUpdateOne) SetName(s string) *ImageUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetPath sets the "path" field.
func (iuo *ImageUpdateOne) SetPath(s string) *ImageUpdateOne {
	iuo.mutation.SetPath(s)
	return iuo
}

// SetCaption sets the "caption" field.
func (iuo *ImageUpdateOne) SetCaption(s string) *ImageUpdateOne {
	iuo.mutation.SetCaption(s)
	return iuo
}

// SetNillableCaption sets the "caption" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableCaption(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetCaption(*s)
	}
	return iuo
}

// ClearCaption clears the value of the "caption" field.
func (iuo *ImageUpdateOne) ClearCaption() *ImageUpdateOne {
	iuo.mutation.ClearCaption()
	return iuo
}

// SetWidth sets the "width" field.
func (iuo *ImageUpdateOne) SetWidth(i int32) *ImageUpdateOne {
	iuo.mutation.ResetWidth()
	iuo.mutation.SetWidth(i)
	return iuo
}

// AddWidth adds i to the "width" field.
func (iuo *ImageUpdateOne) AddWidth(i int32) *ImageUpdateOne {
	iuo.mutation.AddWidth(i)
	return iuo
}

// SetHigh sets the "high" field.
func (iuo *ImageUpdateOne) SetHigh(i int32) *ImageUpdateOne {
	iuo.mutation.ResetHigh()
	iuo.mutation.SetHigh(i)
	return iuo
}

// AddHigh adds i to the "high" field.
func (iuo *ImageUpdateOne) AddHigh(i int32) *ImageUpdateOne {
	iuo.mutation.AddHigh(i)
	return iuo
}

// SetSizeKB sets the "size_kb" field.
func (iuo *ImageUpdateOne) SetSizeKB(f float64) *ImageUpdateOne {
	iuo.mutation.ResetSizeKB()
	iuo.mutation.SetSizeKB(f)
	return iuo
}

// AddSizeKB adds f to the "size_kb" field.
func (iuo *ImageUpdateOne) AddSizeKB(f float64) *ImageUpdateOne {
	iuo.mutation.AddSizeKB(f)
	return iuo
}

// SetUploadedAt sets the "uploaded_at" field.
func (iuo *ImageUpdateOne) SetUploadedAt(t time.Time) *ImageUpdateOne {
	iuo.mutation.SetUploadedAt(t)
	return iuo
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (iuo *ImageUpdateOne) AddUserIDs(ids ...int) *ImageUpdateOne {
	iuo.mutation.AddUserIDs(ids...)
	return iuo
}

// AddUser adds the "user" edges to the User entity.
func (iuo *ImageUpdateOne) AddUser(u ...*User) *ImageUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iuo.AddUserIDs(ids...)
}

// AddCommentIDs adds the "comment" edge to the Comment entity by IDs.
func (iuo *ImageUpdateOne) AddCommentIDs(ids ...int) *ImageUpdateOne {
	iuo.mutation.AddCommentIDs(ids...)
	return iuo
}

// AddComment adds the "comment" edges to the Comment entity.
func (iuo *ImageUpdateOne) AddComment(c ...*Comment) *ImageUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuo.AddCommentIDs(ids...)
}

// AddBrandIDs adds the "brand" edge to the Brand entity by IDs.
func (iuo *ImageUpdateOne) AddBrandIDs(ids ...int) *ImageUpdateOne {
	iuo.mutation.AddBrandIDs(ids...)
	return iuo
}

// AddBrand adds the "brand" edges to the Brand entity.
func (iuo *ImageUpdateOne) AddBrand(b ...*Brand) *ImageUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iuo.AddBrandIDs(ids...)
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (iuo *ImageUpdateOne) AddProductIDs(ids ...int) *ImageUpdateOne {
	iuo.mutation.AddProductIDs(ids...)
	return iuo
}

// AddProduct adds the "product" edges to the Product entity.
func (iuo *ImageUpdateOne) AddProduct(p ...*Product) *ImageUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iuo.AddProductIDs(ids...)
}

// AddCategoryIDs adds the "category" edge to the Category entity by IDs.
func (iuo *ImageUpdateOne) AddCategoryIDs(ids ...int) *ImageUpdateOne {
	iuo.mutation.AddCategoryIDs(ids...)
	return iuo
}

// AddCategory adds the "category" edges to the Category entity.
func (iuo *ImageUpdateOne) AddCategory(c ...*Category) *ImageUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuo.AddCategoryIDs(ids...)
}

// AddSubCategoryIDs adds the "sub_category" edge to the SubCategory entity by IDs.
func (iuo *ImageUpdateOne) AddSubCategoryIDs(ids ...int) *ImageUpdateOne {
	iuo.mutation.AddSubCategoryIDs(ids...)
	return iuo
}

// AddSubCategory adds the "sub_category" edges to the SubCategory entity.
func (iuo *ImageUpdateOne) AddSubCategory(s ...*SubCategory) *ImageUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuo.AddSubCategoryIDs(ids...)
}

// Mutation returns the ImageMutation object of the builder.
func (iuo *ImageUpdateOne) Mutation() *ImageMutation {
	return iuo.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (iuo *ImageUpdateOne) ClearUser() *ImageUpdateOne {
	iuo.mutation.ClearUser()
	return iuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (iuo *ImageUpdateOne) RemoveUserIDs(ids ...int) *ImageUpdateOne {
	iuo.mutation.RemoveUserIDs(ids...)
	return iuo
}

// RemoveUser removes "user" edges to User entities.
func (iuo *ImageUpdateOne) RemoveUser(u ...*User) *ImageUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iuo.RemoveUserIDs(ids...)
}

// ClearComment clears all "comment" edges to the Comment entity.
func (iuo *ImageUpdateOne) ClearComment() *ImageUpdateOne {
	iuo.mutation.ClearComment()
	return iuo
}

// RemoveCommentIDs removes the "comment" edge to Comment entities by IDs.
func (iuo *ImageUpdateOne) RemoveCommentIDs(ids ...int) *ImageUpdateOne {
	iuo.mutation.RemoveCommentIDs(ids...)
	return iuo
}

// RemoveComment removes "comment" edges to Comment entities.
func (iuo *ImageUpdateOne) RemoveComment(c ...*Comment) *ImageUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuo.RemoveCommentIDs(ids...)
}

// ClearBrand clears all "brand" edges to the Brand entity.
func (iuo *ImageUpdateOne) ClearBrand() *ImageUpdateOne {
	iuo.mutation.ClearBrand()
	return iuo
}

// RemoveBrandIDs removes the "brand" edge to Brand entities by IDs.
func (iuo *ImageUpdateOne) RemoveBrandIDs(ids ...int) *ImageUpdateOne {
	iuo.mutation.RemoveBrandIDs(ids...)
	return iuo
}

// RemoveBrand removes "brand" edges to Brand entities.
func (iuo *ImageUpdateOne) RemoveBrand(b ...*Brand) *ImageUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iuo.RemoveBrandIDs(ids...)
}

// ClearProduct clears all "product" edges to the Product entity.
func (iuo *ImageUpdateOne) ClearProduct() *ImageUpdateOne {
	iuo.mutation.ClearProduct()
	return iuo
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (iuo *ImageUpdateOne) RemoveProductIDs(ids ...int) *ImageUpdateOne {
	iuo.mutation.RemoveProductIDs(ids...)
	return iuo
}

// RemoveProduct removes "product" edges to Product entities.
func (iuo *ImageUpdateOne) RemoveProduct(p ...*Product) *ImageUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iuo.RemoveProductIDs(ids...)
}

// ClearCategory clears all "category" edges to the Category entity.
func (iuo *ImageUpdateOne) ClearCategory() *ImageUpdateOne {
	iuo.mutation.ClearCategory()
	return iuo
}

// RemoveCategoryIDs removes the "category" edge to Category entities by IDs.
func (iuo *ImageUpdateOne) RemoveCategoryIDs(ids ...int) *ImageUpdateOne {
	iuo.mutation.RemoveCategoryIDs(ids...)
	return iuo
}

// RemoveCategory removes "category" edges to Category entities.
func (iuo *ImageUpdateOne) RemoveCategory(c ...*Category) *ImageUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuo.RemoveCategoryIDs(ids...)
}

// ClearSubCategory clears all "sub_category" edges to the SubCategory entity.
func (iuo *ImageUpdateOne) ClearSubCategory() *ImageUpdateOne {
	iuo.mutation.ClearSubCategory()
	return iuo
}

// RemoveSubCategoryIDs removes the "sub_category" edge to SubCategory entities by IDs.
func (iuo *ImageUpdateOne) RemoveSubCategoryIDs(ids ...int) *ImageUpdateOne {
	iuo.mutation.RemoveSubCategoryIDs(ids...)
	return iuo
}

// RemoveSubCategory removes "sub_category" edges to SubCategory entities.
func (iuo *ImageUpdateOne) RemoveSubCategory(s ...*SubCategory) *ImageUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuo.RemoveSubCategoryIDs(ids...)
}

// Where appends a list predicates to the ImageUpdate builder.
func (iuo *ImageUpdateOne) Where(ps ...predicate.Image) *ImageUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ImageUpdateOne) Select(field string, fields ...string) *ImageUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Image entity.
func (iuo *ImageUpdateOne) Save(ctx context.Context) (*Image, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ImageUpdateOne) SaveX(ctx context.Context) *Image {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ImageUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ImageUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *ImageUpdateOne) check() error {
	if v, ok := iuo.mutation.Name(); ok {
		if err := image.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Image.name": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Path(); ok {
		if err := image.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Image.path": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Width(); ok {
		if err := image.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "Image.width": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.High(); ok {
		if err := image.HighValidator(v); err != nil {
			return &ValidationError{Name: "high", err: fmt.Errorf(`ent: validator failed for field "Image.high": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.SizeKB(); ok {
		if err := image.SizeKBValidator(v); err != nil {
			return &ValidationError{Name: "size_kb", err: fmt.Errorf(`ent: validator failed for field "Image.size_kb": %w`, err)}
		}
	}
	return nil
}

func (iuo *ImageUpdateOne) sqlSave(ctx context.Context) (_node *Image, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(image.Table, image.Columns, sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Image.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, image.FieldID)
		for _, f := range fields {
			if !image.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != image.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(image.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Path(); ok {
		_spec.SetField(image.FieldPath, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Caption(); ok {
		_spec.SetField(image.FieldCaption, field.TypeString, value)
	}
	if iuo.mutation.CaptionCleared() {
		_spec.ClearField(image.FieldCaption, field.TypeString)
	}
	if value, ok := iuo.mutation.Width(); ok {
		_spec.SetField(image.FieldWidth, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedWidth(); ok {
		_spec.AddField(image.FieldWidth, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.High(); ok {
		_spec.SetField(image.FieldHigh, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedHigh(); ok {
		_spec.AddField(image.FieldHigh, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.SizeKB(); ok {
		_spec.SetField(image.FieldSizeKB, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedSizeKB(); ok {
		_spec.AddField(image.FieldSizeKB, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.UploadedAt(); ok {
		_spec.SetField(image.FieldUploadedAt, field.TypeTime, value)
	}
	if iuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.UserTable,
			Columns: image.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !iuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.UserTable,
			Columns: image.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.UserTable,
			Columns: image.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.CommentTable,
			Columns: image.CommentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedCommentIDs(); len(nodes) > 0 && !iuo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.CommentTable,
			Columns: image.CommentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.CommentTable,
			Columns: image.CommentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.BrandTable,
			Columns: image.BrandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedBrandIDs(); len(nodes) > 0 && !iuo.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.BrandTable,
			Columns: image.BrandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.BrandTable,
			Columns: image.BrandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ProductTable,
			Columns: image.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedProductIDs(); len(nodes) > 0 && !iuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ProductTable,
			Columns: image.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ProductTable,
			Columns: image.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.CategoryTable,
			Columns: image.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedCategoryIDs(); len(nodes) > 0 && !iuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.CategoryTable,
			Columns: image.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.CategoryTable,
			Columns: image.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.SubCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.SubCategoryTable,
			Columns: image.SubCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedSubCategoryIDs(); len(nodes) > 0 && !iuo.mutation.SubCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.SubCategoryTable,
			Columns: image.SubCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.SubCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.SubCategoryTable,
			Columns: image.SubCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Image{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{image.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
