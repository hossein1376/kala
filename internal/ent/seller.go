// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kala/internal/ent/seller"
	"kala/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Seller is the model entity for the Seller schema.
type Seller struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating float64 `json:"rating,omitempty"`
	// RatingCount holds the value of the "rating_count" field.
	RatingCount int32 `json:"rating_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SellerQuery when eager-loading is set.
	Edges        SellerEdges `json:"edges"`
	user_id      *int
	selectValues sql.SelectValues
}

// SellerEdges holds the relations/edges for other nodes in the graph.
type SellerEdges struct {
	// Product holds the value of the product edge.
	Product []*Product `json:"product,omitempty"`
	// Category holds the value of the category edge.
	Category []*Category `json:"category,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading.
func (e SellerEdges) ProductOrErr() ([]*Product, error) {
	if e.loadedTypes[0] {
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading.
func (e SellerEdges) CategoryOrErr() ([]*Category, error) {
	if e.loadedTypes[1] {
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SellerEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Seller) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case seller.FieldRating:
			values[i] = new(sql.NullFloat64)
		case seller.FieldID, seller.FieldRatingCount:
			values[i] = new(sql.NullInt64)
		case seller.FieldName, seller.FieldDescription:
			values[i] = new(sql.NullString)
		case seller.FieldCreateTime, seller.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case seller.ForeignKeys[0]: // user_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Seller fields.
func (s *Seller) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case seller.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case seller.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = value.Time
			}
		case seller.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				s.UpdateTime = value.Time
			}
		case seller.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case seller.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case seller.FieldRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				s.Rating = value.Float64
			}
		case seller.FieldRatingCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rating_count", values[i])
			} else if value.Valid {
				s.RatingCount = int32(value.Int64)
			}
		case seller.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_id", value)
			} else if value.Valid {
				s.user_id = new(int)
				*s.user_id = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Seller.
// This includes values selected through modifiers, order, etc.
func (s *Seller) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryProduct queries the "product" edge of the Seller entity.
func (s *Seller) QueryProduct() *ProductQuery {
	return NewSellerClient(s.config).QueryProduct(s)
}

// QueryCategory queries the "category" edge of the Seller entity.
func (s *Seller) QueryCategory() *CategoryQuery {
	return NewSellerClient(s.config).QueryCategory(s)
}

// QueryUser queries the "user" edge of the Seller entity.
func (s *Seller) QueryUser() *UserQuery {
	return NewSellerClient(s.config).QueryUser(s)
}

// Update returns a builder for updating this Seller.
// Note that you need to call Seller.Unwrap() before calling this method if this Seller
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Seller) Update() *SellerUpdateOne {
	return NewSellerClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Seller entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Seller) Unwrap() *Seller {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Seller is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Seller) String() string {
	var builder strings.Builder
	builder.WriteString("Seller(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("create_time=")
	builder.WriteString(s.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(s.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", s.Rating))
	builder.WriteString(", ")
	builder.WriteString("rating_count=")
	builder.WriteString(fmt.Sprintf("%v", s.RatingCount))
	builder.WriteByte(')')
	return builder.String()
}

// Sellers is a parsable slice of Seller.
type Sellers []*Seller
