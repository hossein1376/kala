// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kala/internal/ent/image"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Image is the model entity for the Image schema.
type Image struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Caption holds the value of the "caption" field.
	Caption string `json:"caption,omitempty"`
	// Width holds the value of the "width" field.
	Width int32 `json:"width,omitempty"`
	// High holds the value of the "high" field.
	High int32 `json:"high,omitempty"`
	// SizeKB holds the value of the "size_kb" field.
	SizeKB float64 `json:"size_kb,omitempty"`
	// UploadedAt holds the value of the "uploaded_at" field.
	UploadedAt time.Time `json:"uploaded_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImageQuery when eager-loading is set.
	Edges        ImageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ImageEdges holds the relations/edges for other nodes in the graph.
type ImageEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// Comment holds the value of the comment edge.
	Comment []*Comment `json:"comment,omitempty"`
	// Brand holds the value of the brand edge.
	Brand []*Brand `json:"brand,omitempty"`
	// Product holds the value of the product edge.
	Product []*Product `json:"product,omitempty"`
	// Category holds the value of the category edge.
	Category []*Category `json:"category,omitempty"`
	// SubCategory holds the value of the sub_category edge.
	SubCategory []*SubCategory `json:"sub_category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e ImageEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CommentOrErr returns the Comment value or an error if the edge
// was not loaded in eager-loading.
func (e ImageEdges) CommentOrErr() ([]*Comment, error) {
	if e.loadedTypes[1] {
		return e.Comment, nil
	}
	return nil, &NotLoadedError{edge: "comment"}
}

// BrandOrErr returns the Brand value or an error if the edge
// was not loaded in eager-loading.
func (e ImageEdges) BrandOrErr() ([]*Brand, error) {
	if e.loadedTypes[2] {
		return e.Brand, nil
	}
	return nil, &NotLoadedError{edge: "brand"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading.
func (e ImageEdges) ProductOrErr() ([]*Product, error) {
	if e.loadedTypes[3] {
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading.
func (e ImageEdges) CategoryOrErr() ([]*Category, error) {
	if e.loadedTypes[4] {
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// SubCategoryOrErr returns the SubCategory value or an error if the edge
// was not loaded in eager-loading.
func (e ImageEdges) SubCategoryOrErr() ([]*SubCategory, error) {
	if e.loadedTypes[5] {
		return e.SubCategory, nil
	}
	return nil, &NotLoadedError{edge: "sub_category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Image) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case image.FieldSizeKB:
			values[i] = new(sql.NullFloat64)
		case image.FieldID, image.FieldWidth, image.FieldHigh:
			values[i] = new(sql.NullInt64)
		case image.FieldName, image.FieldPath, image.FieldCaption:
			values[i] = new(sql.NullString)
		case image.FieldUploadedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Image fields.
func (i *Image) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case image.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case image.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case image.FieldPath:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[j])
			} else if value.Valid {
				i.Path = value.String
			}
		case image.FieldCaption:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field caption", values[j])
			} else if value.Valid {
				i.Caption = value.String
			}
		case image.FieldWidth:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[j])
			} else if value.Valid {
				i.Width = int32(value.Int64)
			}
		case image.FieldHigh:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field high", values[j])
			} else if value.Valid {
				i.High = int32(value.Int64)
			}
		case image.FieldSizeKB:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field size_kb", values[j])
			} else if value.Valid {
				i.SizeKB = value.Float64
			}
		case image.FieldUploadedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field uploaded_at", values[j])
			} else if value.Valid {
				i.UploadedAt = value.Time
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Image.
// This includes values selected through modifiers, order, etc.
func (i *Image) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Image entity.
func (i *Image) QueryUser() *UserQuery {
	return NewImageClient(i.config).QueryUser(i)
}

// QueryComment queries the "comment" edge of the Image entity.
func (i *Image) QueryComment() *CommentQuery {
	return NewImageClient(i.config).QueryComment(i)
}

// QueryBrand queries the "brand" edge of the Image entity.
func (i *Image) QueryBrand() *BrandQuery {
	return NewImageClient(i.config).QueryBrand(i)
}

// QueryProduct queries the "product" edge of the Image entity.
func (i *Image) QueryProduct() *ProductQuery {
	return NewImageClient(i.config).QueryProduct(i)
}

// QueryCategory queries the "category" edge of the Image entity.
func (i *Image) QueryCategory() *CategoryQuery {
	return NewImageClient(i.config).QueryCategory(i)
}

// QuerySubCategory queries the "sub_category" edge of the Image entity.
func (i *Image) QuerySubCategory() *SubCategoryQuery {
	return NewImageClient(i.config).QuerySubCategory(i)
}

// Update returns a builder for updating this Image.
// Note that you need to call Image.Unwrap() before calling this method if this Image
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Image) Update() *ImageUpdateOne {
	return NewImageClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Image entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Image) Unwrap() *Image {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Image is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Image) String() string {
	var builder strings.Builder
	builder.WriteString("Image(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(i.Path)
	builder.WriteString(", ")
	builder.WriteString("caption=")
	builder.WriteString(i.Caption)
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", i.Width))
	builder.WriteString(", ")
	builder.WriteString("high=")
	builder.WriteString(fmt.Sprintf("%v", i.High))
	builder.WriteString(", ")
	builder.WriteString("size_kb=")
	builder.WriteString(fmt.Sprintf("%v", i.SizeKB))
	builder.WriteString(", ")
	builder.WriteString("uploaded_at=")
	builder.WriteString(fmt.Sprintf("%v", i.UploadedAt))
	builder.WriteByte(')')
	return builder.String()
}

// Images is a parsable slice of Image.
type Images []*Image
