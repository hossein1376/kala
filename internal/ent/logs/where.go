// Code generated by ent, DO NOT EDIT.

package logs

import (
	"kala/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldID, id))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldAction, v))
}

// IP applies equality check predicate on the "IP" field. It's identical to IPEQ.
func IP(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldIP, v))
}

// Agent applies equality check predicate on the "agent" field. It's identical to AgentEQ.
func Agent(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldAgent, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Logs {
	vc := time.Time(v)
	return predicate.Logs(sql.FieldEQ(FieldDate, vc))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldAction, v))
}

// ActionIsNil applies the IsNil predicate on the "action" field.
func ActionIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldAction))
}

// ActionNotNil applies the NotNil predicate on the "action" field.
func ActionNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldAction))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldAction, v))
}

// IPEQ applies the EQ predicate on the "IP" field.
func IPEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "IP" field.
func IPNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "IP" field.
func IPIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "IP" field.
func IPNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "IP" field.
func IPGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "IP" field.
func IPGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "IP" field.
func IPLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "IP" field.
func IPLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "IP" field.
func IPContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "IP" field.
func IPHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "IP" field.
func IPHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "IP" field.
func IPEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "IP" field.
func IPContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldIP, v))
}

// AgentEQ applies the EQ predicate on the "agent" field.
func AgentEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldAgent, v))
}

// AgentNEQ applies the NEQ predicate on the "agent" field.
func AgentNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldAgent, v))
}

// AgentIn applies the In predicate on the "agent" field.
func AgentIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldAgent, vs...))
}

// AgentNotIn applies the NotIn predicate on the "agent" field.
func AgentNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldAgent, vs...))
}

// AgentGT applies the GT predicate on the "agent" field.
func AgentGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldAgent, v))
}

// AgentGTE applies the GTE predicate on the "agent" field.
func AgentGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldAgent, v))
}

// AgentLT applies the LT predicate on the "agent" field.
func AgentLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldAgent, v))
}

// AgentLTE applies the LTE predicate on the "agent" field.
func AgentLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldAgent, v))
}

// AgentContains applies the Contains predicate on the "agent" field.
func AgentContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldAgent, v))
}

// AgentHasPrefix applies the HasPrefix predicate on the "agent" field.
func AgentHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldAgent, v))
}

// AgentHasSuffix applies the HasSuffix predicate on the "agent" field.
func AgentHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldAgent, v))
}

// AgentEqualFold applies the EqualFold predicate on the "agent" field.
func AgentEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldAgent, v))
}

// AgentContainsFold applies the ContainsFold predicate on the "agent" field.
func AgentContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldAgent, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.Logs {
	vc := time.Time(v)
	return predicate.Logs(sql.FieldEQ(FieldDate, vc))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.Logs {
	vc := time.Time(v)
	return predicate.Logs(sql.FieldNEQ(FieldDate, vc))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.Logs {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.Logs(sql.FieldIn(FieldDate, v...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.Logs {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.Logs(sql.FieldNotIn(FieldDate, v...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.Logs {
	vc := time.Time(v)
	return predicate.Logs(sql.FieldGT(FieldDate, vc))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.Logs {
	vc := time.Time(v)
	return predicate.Logs(sql.FieldGTE(FieldDate, vc))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.Logs {
	vc := time.Time(v)
	return predicate.Logs(sql.FieldLT(FieldDate, vc))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.Logs {
	vc := time.Time(v)
	return predicate.Logs(sql.FieldLTE(FieldDate, vc))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Logs {
	return predicate.Logs(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Logs {
	return predicate.Logs(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Logs) predicate.Logs {
	return predicate.Logs(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Logs) predicate.Logs {
	return predicate.Logs(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Logs) predicate.Logs {
	return predicate.Logs(func(s *sql.Selector) {
		p(s.Not())
	})
}
