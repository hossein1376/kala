// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hossein1376/kala/internal/ent/attribute"
	"github.com/hossein1376/kala/internal/ent/attributevalue"
	"github.com/hossein1376/kala/internal/ent/predicate"
	"github.com/hossein1376/kala/internal/ent/product"
)

// AttributeValueQuery is the builder for querying AttributeValue entities.
type AttributeValueQuery struct {
	config
	ctx            *QueryContext
	order          []attributevalue.OrderOption
	inters         []Interceptor
	predicates     []predicate.AttributeValue
	withAttributes *AttributeQuery
	withProducts   *ProductQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AttributeValueQuery builder.
func (avq *AttributeValueQuery) Where(ps ...predicate.AttributeValue) *AttributeValueQuery {
	avq.predicates = append(avq.predicates, ps...)
	return avq
}

// Limit the number of records to be returned by this query.
func (avq *AttributeValueQuery) Limit(limit int) *AttributeValueQuery {
	avq.ctx.Limit = &limit
	return avq
}

// Offset to start from.
func (avq *AttributeValueQuery) Offset(offset int) *AttributeValueQuery {
	avq.ctx.Offset = &offset
	return avq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (avq *AttributeValueQuery) Unique(unique bool) *AttributeValueQuery {
	avq.ctx.Unique = &unique
	return avq
}

// Order specifies how the records should be ordered.
func (avq *AttributeValueQuery) Order(o ...attributevalue.OrderOption) *AttributeValueQuery {
	avq.order = append(avq.order, o...)
	return avq
}

// QueryAttributes chains the current query on the "attributes" edge.
func (avq *AttributeValueQuery) QueryAttributes() *AttributeQuery {
	query := (&AttributeClient{config: avq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := avq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := avq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attributevalue.Table, attributevalue.FieldID, selector),
			sqlgraph.To(attribute.Table, attribute.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attributevalue.AttributesTable, attributevalue.AttributesColumn),
		)
		fromU = sqlgraph.SetNeighbors(avq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProducts chains the current query on the "products" edge.
func (avq *AttributeValueQuery) QueryProducts() *ProductQuery {
	query := (&ProductClient{config: avq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := avq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := avq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attributevalue.Table, attributevalue.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attributevalue.ProductsTable, attributevalue.ProductsColumn),
		)
		fromU = sqlgraph.SetNeighbors(avq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AttributeValue entity from the query.
// Returns a *NotFoundError when no AttributeValue was found.
func (avq *AttributeValueQuery) First(ctx context.Context) (*AttributeValue, error) {
	nodes, err := avq.Limit(1).All(setContextOp(ctx, avq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{attributevalue.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (avq *AttributeValueQuery) FirstX(ctx context.Context) *AttributeValue {
	node, err := avq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AttributeValue ID from the query.
// Returns a *NotFoundError when no AttributeValue ID was found.
func (avq *AttributeValueQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = avq.Limit(1).IDs(setContextOp(ctx, avq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{attributevalue.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (avq *AttributeValueQuery) FirstIDX(ctx context.Context) int {
	id, err := avq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AttributeValue entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AttributeValue entity is found.
// Returns a *NotFoundError when no AttributeValue entities are found.
func (avq *AttributeValueQuery) Only(ctx context.Context) (*AttributeValue, error) {
	nodes, err := avq.Limit(2).All(setContextOp(ctx, avq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{attributevalue.Label}
	default:
		return nil, &NotSingularError{attributevalue.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (avq *AttributeValueQuery) OnlyX(ctx context.Context) *AttributeValue {
	node, err := avq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AttributeValue ID in the query.
// Returns a *NotSingularError when more than one AttributeValue ID is found.
// Returns a *NotFoundError when no entities are found.
func (avq *AttributeValueQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = avq.Limit(2).IDs(setContextOp(ctx, avq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{attributevalue.Label}
	default:
		err = &NotSingularError{attributevalue.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (avq *AttributeValueQuery) OnlyIDX(ctx context.Context) int {
	id, err := avq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AttributeValues.
func (avq *AttributeValueQuery) All(ctx context.Context) ([]*AttributeValue, error) {
	ctx = setContextOp(ctx, avq.ctx, "All")
	if err := avq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AttributeValue, *AttributeValueQuery]()
	return withInterceptors[[]*AttributeValue](ctx, avq, qr, avq.inters)
}

// AllX is like All, but panics if an error occurs.
func (avq *AttributeValueQuery) AllX(ctx context.Context) []*AttributeValue {
	nodes, err := avq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AttributeValue IDs.
func (avq *AttributeValueQuery) IDs(ctx context.Context) (ids []int, err error) {
	if avq.ctx.Unique == nil && avq.path != nil {
		avq.Unique(true)
	}
	ctx = setContextOp(ctx, avq.ctx, "IDs")
	if err = avq.Select(attributevalue.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (avq *AttributeValueQuery) IDsX(ctx context.Context) []int {
	ids, err := avq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (avq *AttributeValueQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, avq.ctx, "Count")
	if err := avq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, avq, querierCount[*AttributeValueQuery](), avq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (avq *AttributeValueQuery) CountX(ctx context.Context) int {
	count, err := avq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (avq *AttributeValueQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, avq.ctx, "Exist")
	switch _, err := avq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (avq *AttributeValueQuery) ExistX(ctx context.Context) bool {
	exist, err := avq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AttributeValueQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (avq *AttributeValueQuery) Clone() *AttributeValueQuery {
	if avq == nil {
		return nil
	}
	return &AttributeValueQuery{
		config:         avq.config,
		ctx:            avq.ctx.Clone(),
		order:          append([]attributevalue.OrderOption{}, avq.order...),
		inters:         append([]Interceptor{}, avq.inters...),
		predicates:     append([]predicate.AttributeValue{}, avq.predicates...),
		withAttributes: avq.withAttributes.Clone(),
		withProducts:   avq.withProducts.Clone(),
		// clone intermediate query.
		sql:  avq.sql.Clone(),
		path: avq.path,
	}
}

// WithAttributes tells the query-builder to eager-load the nodes that are connected to
// the "attributes" edge. The optional arguments are used to configure the query builder of the edge.
func (avq *AttributeValueQuery) WithAttributes(opts ...func(*AttributeQuery)) *AttributeValueQuery {
	query := (&AttributeClient{config: avq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	avq.withAttributes = query
	return avq
}

// WithProducts tells the query-builder to eager-load the nodes that are connected to
// the "products" edge. The optional arguments are used to configure the query builder of the edge.
func (avq *AttributeValueQuery) WithProducts(opts ...func(*ProductQuery)) *AttributeValueQuery {
	query := (&ProductClient{config: avq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	avq.withProducts = query
	return avq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Value string `json:"value,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AttributeValue.Query().
//		GroupBy(attributevalue.FieldValue).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (avq *AttributeValueQuery) GroupBy(field string, fields ...string) *AttributeValueGroupBy {
	avq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AttributeValueGroupBy{build: avq}
	grbuild.flds = &avq.ctx.Fields
	grbuild.label = attributevalue.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Value string `json:"value,omitempty"`
//	}
//
//	client.AttributeValue.Query().
//		Select(attributevalue.FieldValue).
//		Scan(ctx, &v)
func (avq *AttributeValueQuery) Select(fields ...string) *AttributeValueSelect {
	avq.ctx.Fields = append(avq.ctx.Fields, fields...)
	sbuild := &AttributeValueSelect{AttributeValueQuery: avq}
	sbuild.label = attributevalue.Label
	sbuild.flds, sbuild.scan = &avq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AttributeValueSelect configured with the given aggregations.
func (avq *AttributeValueQuery) Aggregate(fns ...AggregateFunc) *AttributeValueSelect {
	return avq.Select().Aggregate(fns...)
}

func (avq *AttributeValueQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range avq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, avq); err != nil {
				return err
			}
		}
	}
	for _, f := range avq.ctx.Fields {
		if !attributevalue.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if avq.path != nil {
		prev, err := avq.path(ctx)
		if err != nil {
			return err
		}
		avq.sql = prev
	}
	return nil
}

func (avq *AttributeValueQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AttributeValue, error) {
	var (
		nodes       = []*AttributeValue{}
		_spec       = avq.querySpec()
		loadedTypes = [2]bool{
			avq.withAttributes != nil,
			avq.withProducts != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AttributeValue).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AttributeValue{config: avq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, avq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := avq.withAttributes; query != nil {
		if err := avq.loadAttributes(ctx, query, nodes, nil,
			func(n *AttributeValue, e *Attribute) { n.Edges.Attributes = e }); err != nil {
			return nil, err
		}
	}
	if query := avq.withProducts; query != nil {
		if err := avq.loadProducts(ctx, query, nodes, nil,
			func(n *AttributeValue, e *Product) { n.Edges.Products = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (avq *AttributeValueQuery) loadAttributes(ctx context.Context, query *AttributeQuery, nodes []*AttributeValue, init func(*AttributeValue), assign func(*AttributeValue, *Attribute)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AttributeValue)
	for i := range nodes {
		fk := nodes[i].Attribute
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(attribute.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "attribute" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (avq *AttributeValueQuery) loadProducts(ctx context.Context, query *ProductQuery, nodes []*AttributeValue, init func(*AttributeValue), assign func(*AttributeValue, *Product)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AttributeValue)
	for i := range nodes {
		fk := nodes[i].Product
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(product.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (avq *AttributeValueQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := avq.querySpec()
	_spec.Node.Columns = avq.ctx.Fields
	if len(avq.ctx.Fields) > 0 {
		_spec.Unique = avq.ctx.Unique != nil && *avq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, avq.driver, _spec)
}

func (avq *AttributeValueQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(attributevalue.Table, attributevalue.Columns, sqlgraph.NewFieldSpec(attributevalue.FieldID, field.TypeInt))
	_spec.From = avq.sql
	if unique := avq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if avq.path != nil {
		_spec.Unique = true
	}
	if fields := avq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attributevalue.FieldID)
		for i := range fields {
			if fields[i] != attributevalue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if avq.withAttributes != nil {
			_spec.Node.AddColumnOnce(attributevalue.FieldAttribute)
		}
		if avq.withProducts != nil {
			_spec.Node.AddColumnOnce(attributevalue.FieldProduct)
		}
	}
	if ps := avq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := avq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := avq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := avq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (avq *AttributeValueQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(avq.driver.Dialect())
	t1 := builder.Table(attributevalue.Table)
	columns := avq.ctx.Fields
	if len(columns) == 0 {
		columns = attributevalue.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if avq.sql != nil {
		selector = avq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if avq.ctx.Unique != nil && *avq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range avq.predicates {
		p(selector)
	}
	for _, p := range avq.order {
		p(selector)
	}
	if offset := avq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := avq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AttributeValueGroupBy is the group-by builder for AttributeValue entities.
type AttributeValueGroupBy struct {
	selector
	build *AttributeValueQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (avgb *AttributeValueGroupBy) Aggregate(fns ...AggregateFunc) *AttributeValueGroupBy {
	avgb.fns = append(avgb.fns, fns...)
	return avgb
}

// Scan applies the selector query and scans the result into the given value.
func (avgb *AttributeValueGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, avgb.build.ctx, "GroupBy")
	if err := avgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AttributeValueQuery, *AttributeValueGroupBy](ctx, avgb.build, avgb, avgb.build.inters, v)
}

func (avgb *AttributeValueGroupBy) sqlScan(ctx context.Context, root *AttributeValueQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(avgb.fns))
	for _, fn := range avgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*avgb.flds)+len(avgb.fns))
		for _, f := range *avgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*avgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := avgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AttributeValueSelect is the builder for selecting fields of AttributeValue entities.
type AttributeValueSelect struct {
	*AttributeValueQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (avs *AttributeValueSelect) Aggregate(fns ...AggregateFunc) *AttributeValueSelect {
	avs.fns = append(avs.fns, fns...)
	return avs
}

// Scan applies the selector query and scans the result into the given value.
func (avs *AttributeValueSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, avs.ctx, "Select")
	if err := avs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AttributeValueQuery, *AttributeValueSelect](ctx, avs.AttributeValueQuery, avs, avs.inters, v)
}

func (avs *AttributeValueSelect) sqlScan(ctx context.Context, root *AttributeValueQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(avs.fns))
	for _, fn := range avs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*avs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := avs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
