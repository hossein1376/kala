// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hossein1376/kala/internal/ent/attribute"
	"github.com/hossein1376/kala/internal/ent/attributevalue"
	"github.com/hossein1376/kala/internal/ent/product"
)

// AttributeValueCreate is the builder for creating a AttributeValue entity.
type AttributeValueCreate struct {
	config
	mutation *AttributeValueMutation
	hooks    []Hook
}

// SetValue sets the "value" field.
func (avc *AttributeValueCreate) SetValue(s string) *AttributeValueCreate {
	avc.mutation.SetValue(s)
	return avc
}

// SetAttribute sets the "attribute" field.
func (avc *AttributeValueCreate) SetAttribute(i int) *AttributeValueCreate {
	avc.mutation.SetAttribute(i)
	return avc
}

// SetProduct sets the "product" field.
func (avc *AttributeValueCreate) SetProduct(i int) *AttributeValueCreate {
	avc.mutation.SetProduct(i)
	return avc
}

// SetAttributesID sets the "attributes" edge to the Attribute entity by ID.
func (avc *AttributeValueCreate) SetAttributesID(id int) *AttributeValueCreate {
	avc.mutation.SetAttributesID(id)
	return avc
}

// SetAttributes sets the "attributes" edge to the Attribute entity.
func (avc *AttributeValueCreate) SetAttributes(a *Attribute) *AttributeValueCreate {
	return avc.SetAttributesID(a.ID)
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (avc *AttributeValueCreate) SetProductsID(id int) *AttributeValueCreate {
	avc.mutation.SetProductsID(id)
	return avc
}

// SetProducts sets the "products" edge to the Product entity.
func (avc *AttributeValueCreate) SetProducts(p *Product) *AttributeValueCreate {
	return avc.SetProductsID(p.ID)
}

// Mutation returns the AttributeValueMutation object of the builder.
func (avc *AttributeValueCreate) Mutation() *AttributeValueMutation {
	return avc.mutation
}

// Save creates the AttributeValue in the database.
func (avc *AttributeValueCreate) Save(ctx context.Context) (*AttributeValue, error) {
	return withHooks(ctx, avc.sqlSave, avc.mutation, avc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (avc *AttributeValueCreate) SaveX(ctx context.Context) *AttributeValue {
	v, err := avc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (avc *AttributeValueCreate) Exec(ctx context.Context) error {
	_, err := avc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avc *AttributeValueCreate) ExecX(ctx context.Context) {
	if err := avc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avc *AttributeValueCreate) check() error {
	if _, ok := avc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "AttributeValue.value"`)}
	}
	if v, ok := avc.mutation.Value(); ok {
		if err := attributevalue.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "AttributeValue.value": %w`, err)}
		}
	}
	if _, ok := avc.mutation.Attribute(); !ok {
		return &ValidationError{Name: "attribute", err: errors.New(`ent: missing required field "AttributeValue.attribute"`)}
	}
	if _, ok := avc.mutation.Product(); !ok {
		return &ValidationError{Name: "product", err: errors.New(`ent: missing required field "AttributeValue.product"`)}
	}
	if _, ok := avc.mutation.AttributesID(); !ok {
		return &ValidationError{Name: "attributes", err: errors.New(`ent: missing required edge "AttributeValue.attributes"`)}
	}
	if _, ok := avc.mutation.ProductsID(); !ok {
		return &ValidationError{Name: "products", err: errors.New(`ent: missing required edge "AttributeValue.products"`)}
	}
	return nil
}

func (avc *AttributeValueCreate) sqlSave(ctx context.Context) (*AttributeValue, error) {
	if err := avc.check(); err != nil {
		return nil, err
	}
	_node, _spec := avc.createSpec()
	if err := sqlgraph.CreateNode(ctx, avc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	avc.mutation.id = &_node.ID
	avc.mutation.done = true
	return _node, nil
}

func (avc *AttributeValueCreate) createSpec() (*AttributeValue, *sqlgraph.CreateSpec) {
	var (
		_node = &AttributeValue{config: avc.config}
		_spec = sqlgraph.NewCreateSpec(attributevalue.Table, sqlgraph.NewFieldSpec(attributevalue.FieldID, field.TypeInt))
	)
	if value, ok := avc.mutation.Value(); ok {
		_spec.SetField(attributevalue.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := avc.mutation.AttributesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevalue.AttributesTable,
			Columns: []string{attributevalue.AttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Attribute = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := avc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevalue.ProductsTable,
			Columns: []string{attributevalue.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Product = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AttributeValueCreateBulk is the builder for creating many AttributeValue entities in bulk.
type AttributeValueCreateBulk struct {
	config
	builders []*AttributeValueCreate
}

// Save creates the AttributeValue entities in the database.
func (avcb *AttributeValueCreateBulk) Save(ctx context.Context) ([]*AttributeValue, error) {
	specs := make([]*sqlgraph.CreateSpec, len(avcb.builders))
	nodes := make([]*AttributeValue, len(avcb.builders))
	mutators := make([]Mutator, len(avcb.builders))
	for i := range avcb.builders {
		func(i int, root context.Context) {
			builder := avcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttributeValueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, avcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, avcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, avcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (avcb *AttributeValueCreateBulk) SaveX(ctx context.Context) []*AttributeValue {
	v, err := avcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (avcb *AttributeValueCreateBulk) Exec(ctx context.Context) error {
	_, err := avcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avcb *AttributeValueCreateBulk) ExecX(ctx context.Context) {
	if err := avcb.Exec(ctx); err != nil {
		panic(err)
	}
}
