// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kala/internal/ent/attribute"
	"kala/internal/ent/attributevalue"
	"kala/internal/ent/product"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AttributeValue is the model entity for the AttributeValue schema.
type AttributeValue struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Attribute holds the value of the "attribute" field.
	Attribute int `json:"attribute,omitempty"`
	// Product holds the value of the "product" field.
	Product int `json:"product,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttributeValueQuery when eager-loading is set.
	Edges        AttributeValueEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AttributeValueEdges holds the relations/edges for other nodes in the graph.
type AttributeValueEdges struct {
	// Attributes holds the value of the attributes edge.
	Attributes *Attribute `json:"attributes,omitempty"`
	// Products holds the value of the products edge.
	Products *Product `json:"products,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AttributesOrErr returns the Attributes value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttributeValueEdges) AttributesOrErr() (*Attribute, error) {
	if e.loadedTypes[0] {
		if e.Attributes == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: attribute.Label}
		}
		return e.Attributes, nil
	}
	return nil, &NotLoadedError{edge: "attributes"}
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttributeValueEdges) ProductsOrErr() (*Product, error) {
	if e.loadedTypes[1] {
		if e.Products == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AttributeValue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attributevalue.FieldID, attributevalue.FieldAttribute, attributevalue.FieldProduct:
			values[i] = new(sql.NullInt64)
		case attributevalue.FieldValue:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AttributeValue fields.
func (av *AttributeValue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attributevalue.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			av.ID = int(value.Int64)
		case attributevalue.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				av.Value = value.String
			}
		case attributevalue.FieldAttribute:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attribute", values[i])
			} else if value.Valid {
				av.Attribute = int(value.Int64)
			}
		case attributevalue.FieldProduct:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product", values[i])
			} else if value.Valid {
				av.Product = int(value.Int64)
			}
		default:
			av.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the AttributeValue.
// This includes values selected through modifiers, order, etc.
func (av *AttributeValue) GetValue(name string) (ent.Value, error) {
	return av.selectValues.Get(name)
}

// QueryAttributes queries the "attributes" edge of the AttributeValue entity.
func (av *AttributeValue) QueryAttributes() *AttributeQuery {
	return NewAttributeValueClient(av.config).QueryAttributes(av)
}

// QueryProducts queries the "products" edge of the AttributeValue entity.
func (av *AttributeValue) QueryProducts() *ProductQuery {
	return NewAttributeValueClient(av.config).QueryProducts(av)
}

// Update returns a builder for updating this AttributeValue.
// Note that you need to call AttributeValue.Unwrap() before calling this method if this AttributeValue
// was returned from a transaction, and the transaction was committed or rolled back.
func (av *AttributeValue) Update() *AttributeValueUpdateOne {
	return NewAttributeValueClient(av.config).UpdateOne(av)
}

// Unwrap unwraps the AttributeValue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (av *AttributeValue) Unwrap() *AttributeValue {
	_tx, ok := av.config.driver.(*txDriver)
	if !ok {
		panic("ent: AttributeValue is not a transactional entity")
	}
	av.config.driver = _tx.drv
	return av
}

// String implements the fmt.Stringer.
func (av *AttributeValue) String() string {
	var builder strings.Builder
	builder.WriteString("AttributeValue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", av.ID))
	builder.WriteString("value=")
	builder.WriteString(av.Value)
	builder.WriteString(", ")
	builder.WriteString("attribute=")
	builder.WriteString(fmt.Sprintf("%v", av.Attribute))
	builder.WriteString(", ")
	builder.WriteString("product=")
	builder.WriteString(fmt.Sprintf("%v", av.Product))
	builder.WriteByte(')')
	return builder.String()
}

// AttributeValues is a parsable slice of AttributeValue.
type AttributeValues []*AttributeValue
