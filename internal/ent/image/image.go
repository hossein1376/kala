// Code generated by ent, DO NOT EDIT.

package image

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the image type in the database.
	Label = "image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldCaption holds the string denoting the caption field in the database.
	FieldCaption = "caption"
	// FieldWidth holds the string denoting the width field in the database.
	FieldWidth = "width"
	// FieldHigh holds the string denoting the high field in the database.
	FieldHigh = "high"
	// FieldSizeKB holds the string denoting the size_kb field in the database.
	FieldSizeKB = "size_kb"
	// FieldUploadedAt holds the string denoting the uploaded_at field in the database.
	FieldUploadedAt = "uploaded_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeComment holds the string denoting the comment edge name in mutations.
	EdgeComment = "comment"
	// EdgeBrand holds the string denoting the brand edge name in mutations.
	EdgeBrand = "brand"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// EdgeCategory holds the string denoting the category edge name in mutations.
	EdgeCategory = "category"
	// EdgeSubCategory holds the string denoting the sub_category edge name in mutations.
	EdgeSubCategory = "sub_category"
	// Table holds the table name of the image in the database.
	Table = "images"
	// UserTable is the table that holds the user relation/edge. The primary key declared below.
	UserTable = "user_images"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// CommentTable is the table that holds the comment relation/edge. The primary key declared below.
	CommentTable = "comment_images"
	// CommentInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentInverseTable = "comments"
	// BrandTable is the table that holds the brand relation/edge. The primary key declared below.
	BrandTable = "brand_images"
	// BrandInverseTable is the table name for the Brand entity.
	// It exists in this package in order to avoid circular dependency with the "brand" package.
	BrandInverseTable = "brands"
	// ProductTable is the table that holds the product relation/edge. The primary key declared below.
	ProductTable = "product_images"
	// ProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductInverseTable = "products"
	// CategoryTable is the table that holds the category relation/edge. The primary key declared below.
	CategoryTable = "category_images"
	// CategoryInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoryInverseTable = "categories"
	// SubCategoryTable is the table that holds the sub_category relation/edge. The primary key declared below.
	SubCategoryTable = "sub_category_images"
	// SubCategoryInverseTable is the table name for the SubCategory entity.
	// It exists in this package in order to avoid circular dependency with the "subcategory" package.
	SubCategoryInverseTable = "sub_categories"
)

// Columns holds all SQL columns for image fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPath,
	FieldCaption,
	FieldWidth,
	FieldHigh,
	FieldSizeKB,
	FieldUploadedAt,
}

var (
	// UserPrimaryKey and UserColumn2 are the table columns denoting the
	// primary key for the user relation (M2M).
	UserPrimaryKey = []string{"user", "image"}
	// CommentPrimaryKey and CommentColumn2 are the table columns denoting the
	// primary key for the comment relation (M2M).
	CommentPrimaryKey = []string{"comment", "image"}
	// BrandPrimaryKey and BrandColumn2 are the table columns denoting the
	// primary key for the brand relation (M2M).
	BrandPrimaryKey = []string{"brand", "image"}
	// ProductPrimaryKey and ProductColumn2 are the table columns denoting the
	// primary key for the product relation (M2M).
	ProductPrimaryKey = []string{"product", "image"}
	// CategoryPrimaryKey and CategoryColumn2 are the table columns denoting the
	// primary key for the category relation (M2M).
	CategoryPrimaryKey = []string{"category", "image"}
	// SubCategoryPrimaryKey and SubCategoryColumn2 are the table columns denoting the
	// primary key for the sub_category relation (M2M).
	SubCategoryPrimaryKey = []string{"sub_category", "image"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PathValidator is a validator for the "path" field. It is called by the builders before save.
	PathValidator func(string) error
	// WidthValidator is a validator for the "width" field. It is called by the builders before save.
	WidthValidator func(int32) error
	// HighValidator is a validator for the "high" field. It is called by the builders before save.
	HighValidator func(int32) error
	// SizeKBValidator is a validator for the "size_kb" field. It is called by the builders before save.
	SizeKBValidator func(float64) error
)

// OrderOption defines the ordering options for the Image queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByCaption orders the results by the caption field.
func ByCaption(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaption, opts...).ToFunc()
}

// ByWidth orders the results by the width field.
func ByWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWidth, opts...).ToFunc()
}

// ByHigh orders the results by the high field.
func ByHigh(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHigh, opts...).ToFunc()
}

// BySizeKB orders the results by the size_kb field.
func BySizeKB(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSizeKB, opts...).ToFunc()
}

// ByUploadedAt orders the results by the uploaded_at field.
func ByUploadedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploadedAt, opts...).ToFunc()
}

// ByUserCount orders the results by user count.
func ByUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserStep(), opts...)
	}
}

// ByUser orders the results by user terms.
func ByUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommentCount orders the results by comment count.
func ByCommentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentStep(), opts...)
	}
}

// ByComment orders the results by comment terms.
func ByComment(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBrandCount orders the results by brand count.
func ByBrandCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBrandStep(), opts...)
	}
}

// ByBrand orders the results by brand terms.
func ByBrand(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBrandStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductCount orders the results by product count.
func ByProductCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductStep(), opts...)
	}
}

// ByProduct orders the results by product terms.
func ByProduct(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCategoryCount orders the results by category count.
func ByCategoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCategoryStep(), opts...)
	}
}

// ByCategory orders the results by category terms.
func ByCategory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubCategoryCount orders the results by sub_category count.
func BySubCategoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubCategoryStep(), opts...)
	}
}

// BySubCategory orders the results by sub_category terms.
func BySubCategory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubCategoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
	)
}
func newCommentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CommentTable, CommentPrimaryKey...),
	)
}
func newBrandStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BrandInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, BrandTable, BrandPrimaryKey...),
	)
}
func newProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProductTable, ProductPrimaryKey...),
	)
}
func newCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CategoryTable, CategoryPrimaryKey...),
	)
}
func newSubCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubCategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SubCategoryTable, SubCategoryPrimaryKey...),
	)
}
