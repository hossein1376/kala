// Code generated by ent, DO NOT EDIT.

package pros

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the pros type in the database.
	Label = "pros"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPro holds the string denoting the pro field in the database.
	FieldPro = "pro"
	// EdgeComment holds the string denoting the comment edge name in mutations.
	EdgeComment = "comment"
	// Table holds the table name of the pros in the database.
	Table = "pros"
	// CommentTable is the table that holds the comment relation/edge.
	CommentTable = "pros"
	// CommentInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentInverseTable = "comments"
	// CommentColumn is the table column denoting the comment relation/edge.
	CommentColumn = "comment"
)

// Columns holds all SQL columns for pros fields.
var Columns = []string{
	FieldID,
	FieldPro,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "pros"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"comment",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ProValidator is a validator for the "pro" field. It is called by the builders before save.
	ProValidator func(string) error
)

// OrderOption defines the ordering options for the Pros queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPro orders the results by the pro field.
func ByPro(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPro, opts...).ToFunc()
}

// ByCommentField orders the results by comment field.
func ByCommentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentStep(), sql.OrderByField(field, opts...))
	}
}
func newCommentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CommentTable, CommentColumn),
	)
}
