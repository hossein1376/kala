// Code generated by ent, DO NOT EDIT.

package pros

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hossein1376/kala/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Pros {
	return predicate.Pros(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Pros {
	return predicate.Pros(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Pros {
	return predicate.Pros(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Pros {
	return predicate.Pros(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Pros {
	return predicate.Pros(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Pros {
	return predicate.Pros(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Pros {
	return predicate.Pros(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Pros {
	return predicate.Pros(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Pros {
	return predicate.Pros(sql.FieldLTE(FieldID, id))
}

// Pro applies equality check predicate on the "pro" field. It's identical to ProEQ.
func Pro(v string) predicate.Pros {
	return predicate.Pros(sql.FieldEQ(FieldPro, v))
}

// ProEQ applies the EQ predicate on the "pro" field.
func ProEQ(v string) predicate.Pros {
	return predicate.Pros(sql.FieldEQ(FieldPro, v))
}

// ProNEQ applies the NEQ predicate on the "pro" field.
func ProNEQ(v string) predicate.Pros {
	return predicate.Pros(sql.FieldNEQ(FieldPro, v))
}

// ProIn applies the In predicate on the "pro" field.
func ProIn(vs ...string) predicate.Pros {
	return predicate.Pros(sql.FieldIn(FieldPro, vs...))
}

// ProNotIn applies the NotIn predicate on the "pro" field.
func ProNotIn(vs ...string) predicate.Pros {
	return predicate.Pros(sql.FieldNotIn(FieldPro, vs...))
}

// ProGT applies the GT predicate on the "pro" field.
func ProGT(v string) predicate.Pros {
	return predicate.Pros(sql.FieldGT(FieldPro, v))
}

// ProGTE applies the GTE predicate on the "pro" field.
func ProGTE(v string) predicate.Pros {
	return predicate.Pros(sql.FieldGTE(FieldPro, v))
}

// ProLT applies the LT predicate on the "pro" field.
func ProLT(v string) predicate.Pros {
	return predicate.Pros(sql.FieldLT(FieldPro, v))
}

// ProLTE applies the LTE predicate on the "pro" field.
func ProLTE(v string) predicate.Pros {
	return predicate.Pros(sql.FieldLTE(FieldPro, v))
}

// ProContains applies the Contains predicate on the "pro" field.
func ProContains(v string) predicate.Pros {
	return predicate.Pros(sql.FieldContains(FieldPro, v))
}

// ProHasPrefix applies the HasPrefix predicate on the "pro" field.
func ProHasPrefix(v string) predicate.Pros {
	return predicate.Pros(sql.FieldHasPrefix(FieldPro, v))
}

// ProHasSuffix applies the HasSuffix predicate on the "pro" field.
func ProHasSuffix(v string) predicate.Pros {
	return predicate.Pros(sql.FieldHasSuffix(FieldPro, v))
}

// ProEqualFold applies the EqualFold predicate on the "pro" field.
func ProEqualFold(v string) predicate.Pros {
	return predicate.Pros(sql.FieldEqualFold(FieldPro, v))
}

// ProContainsFold applies the ContainsFold predicate on the "pro" field.
func ProContainsFold(v string) predicate.Pros {
	return predicate.Pros(sql.FieldContainsFold(FieldPro, v))
}

// HasComment applies the HasEdge predicate on the "comment" edge.
func HasComment() predicate.Pros {
	return predicate.Pros(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CommentTable, CommentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentWith applies the HasEdge predicate on the "comment" edge with a given conditions (other predicates).
func HasCommentWith(preds ...predicate.Comment) predicate.Pros {
	return predicate.Pros(func(s *sql.Selector) {
		step := newCommentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pros) predicate.Pros {
	return predicate.Pros(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pros) predicate.Pros {
	return predicate.Pros(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pros) predicate.Pros {
	return predicate.Pros(func(s *sql.Selector) {
		p(s.Not())
	})
}
