// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kala/internal/ent/comment"
	"kala/internal/ent/cons"
	"kala/internal/ent/image"
	"kala/internal/ent/predicate"
	"kala/internal/ent/product"
	"kala/internal/ent/pros"
	"kala/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentUpdate is the builder for updating Comment entities.
type CommentUpdate struct {
	config
	hooks    []Hook
	mutation *CommentMutation
}

// Where appends a list predicates to the CommentUpdate builder.
func (cu *CommentUpdate) Where(ps ...predicate.Comment) *CommentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CommentUpdate) SetUpdateTime(t time.Time) *CommentUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetContent sets the "content" field.
func (cu *CommentUpdate) SetContent(s string) *CommentUpdate {
	cu.mutation.SetContent(s)
	return cu
}

// SetStatus sets the "status" field.
func (cu *CommentUpdate) SetStatus(c comment.Status) *CommentUpdate {
	cu.mutation.SetStatus(c)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableStatus(c *comment.Status) *CommentUpdate {
	if c != nil {
		cu.SetStatus(*c)
	}
	return cu
}

// SetLikes sets the "likes" field.
func (cu *CommentUpdate) SetLikes(i int32) *CommentUpdate {
	cu.mutation.ResetLikes()
	cu.mutation.SetLikes(i)
	return cu
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableLikes(i *int32) *CommentUpdate {
	if i != nil {
		cu.SetLikes(*i)
	}
	return cu
}

// AddLikes adds i to the "likes" field.
func (cu *CommentUpdate) AddLikes(i int32) *CommentUpdate {
	cu.mutation.AddLikes(i)
	return cu
}

// SetDislikes sets the "dislikes" field.
func (cu *CommentUpdate) SetDislikes(i int32) *CommentUpdate {
	cu.mutation.ResetDislikes()
	cu.mutation.SetDislikes(i)
	return cu
}

// SetNillableDislikes sets the "dislikes" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableDislikes(i *int32) *CommentUpdate {
	if i != nil {
		cu.SetDislikes(*i)
	}
	return cu
}

// AddDislikes adds i to the "dislikes" field.
func (cu *CommentUpdate) AddDislikes(i int32) *CommentUpdate {
	cu.mutation.AddDislikes(i)
	return cu
}

// SetRating sets the "rating" field.
func (cu *CommentUpdate) SetRating(f float64) *CommentUpdate {
	cu.mutation.ResetRating()
	cu.mutation.SetRating(f)
	return cu
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableRating(f *float64) *CommentUpdate {
	if f != nil {
		cu.SetRating(*f)
	}
	return cu
}

// AddRating adds f to the "rating" field.
func (cu *CommentUpdate) AddRating(f float64) *CommentUpdate {
	cu.mutation.AddRating(f)
	return cu
}

// SetRatingCount sets the "rating_count" field.
func (cu *CommentUpdate) SetRatingCount(i int32) *CommentUpdate {
	cu.mutation.ResetRatingCount()
	cu.mutation.SetRatingCount(i)
	return cu
}

// AddRatingCount adds i to the "rating_count" field.
func (cu *CommentUpdate) AddRatingCount(i int32) *CommentUpdate {
	cu.mutation.AddRatingCount(i)
	return cu
}

// SetVerifiedBuyer sets the "verified_buyer" field.
func (cu *CommentUpdate) SetVerifiedBuyer(b bool) *CommentUpdate {
	cu.mutation.SetVerifiedBuyer(b)
	return cu
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (cu *CommentUpdate) SetImageID(id int) *CommentUpdate {
	cu.mutation.SetImageID(id)
	return cu
}

// SetNillableImageID sets the "image" edge to the Image entity by ID if the given value is not nil.
func (cu *CommentUpdate) SetNillableImageID(id *int) *CommentUpdate {
	if id != nil {
		cu = cu.SetImageID(*id)
	}
	return cu
}

// SetImage sets the "image" edge to the Image entity.
func (cu *CommentUpdate) SetImage(i *Image) *CommentUpdate {
	return cu.SetImageID(i.ID)
}

// AddConIDs adds the "cons" edge to the Cons entity by IDs.
func (cu *CommentUpdate) AddConIDs(ids ...int) *CommentUpdate {
	cu.mutation.AddConIDs(ids...)
	return cu
}

// AddCons adds the "cons" edges to the Cons entity.
func (cu *CommentUpdate) AddCons(c ...*Cons) *CommentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddConIDs(ids...)
}

// AddProIDs adds the "pros" edge to the Pros entity by IDs.
func (cu *CommentUpdate) AddProIDs(ids ...int) *CommentUpdate {
	cu.mutation.AddProIDs(ids...)
	return cu
}

// AddPros adds the "pros" edges to the Pros entity.
func (cu *CommentUpdate) AddPros(p ...*Pros) *CommentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (cu *CommentUpdate) AddUserIDs(ids ...int) *CommentUpdate {
	cu.mutation.AddUserIDs(ids...)
	return cu
}

// AddUser adds the "user" edges to the User entity.
func (cu *CommentUpdate) AddUser(u ...*User) *CommentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddUserIDs(ids...)
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (cu *CommentUpdate) AddProductIDs(ids ...int) *CommentUpdate {
	cu.mutation.AddProductIDs(ids...)
	return cu
}

// AddProduct adds the "product" edges to the Product entity.
func (cu *CommentUpdate) AddProduct(p ...*Product) *CommentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProductIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (cu *CommentUpdate) Mutation() *CommentMutation {
	return cu.mutation
}

// ClearImage clears the "image" edge to the Image entity.
func (cu *CommentUpdate) ClearImage() *CommentUpdate {
	cu.mutation.ClearImage()
	return cu
}

// ClearCons clears all "cons" edges to the Cons entity.
func (cu *CommentUpdate) ClearCons() *CommentUpdate {
	cu.mutation.ClearCons()
	return cu
}

// RemoveConIDs removes the "cons" edge to Cons entities by IDs.
func (cu *CommentUpdate) RemoveConIDs(ids ...int) *CommentUpdate {
	cu.mutation.RemoveConIDs(ids...)
	return cu
}

// RemoveCons removes "cons" edges to Cons entities.
func (cu *CommentUpdate) RemoveCons(c ...*Cons) *CommentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveConIDs(ids...)
}

// ClearPros clears all "pros" edges to the Pros entity.
func (cu *CommentUpdate) ClearPros() *CommentUpdate {
	cu.mutation.ClearPros()
	return cu
}

// RemoveProIDs removes the "pros" edge to Pros entities by IDs.
func (cu *CommentUpdate) RemoveProIDs(ids ...int) *CommentUpdate {
	cu.mutation.RemoveProIDs(ids...)
	return cu
}

// RemovePros removes "pros" edges to Pros entities.
func (cu *CommentUpdate) RemovePros(p ...*Pros) *CommentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (cu *CommentUpdate) ClearUser() *CommentUpdate {
	cu.mutation.ClearUser()
	return cu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (cu *CommentUpdate) RemoveUserIDs(ids ...int) *CommentUpdate {
	cu.mutation.RemoveUserIDs(ids...)
	return cu
}

// RemoveUser removes "user" edges to User entities.
func (cu *CommentUpdate) RemoveUser(u ...*User) *CommentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveUserIDs(ids...)
}

// ClearProduct clears all "product" edges to the Product entity.
func (cu *CommentUpdate) ClearProduct() *CommentUpdate {
	cu.mutation.ClearProduct()
	return cu
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (cu *CommentUpdate) RemoveProductIDs(ids ...int) *CommentUpdate {
	cu.mutation.RemoveProductIDs(ids...)
	return cu
}

// RemoveProduct removes "product" edges to Product entities.
func (cu *CommentUpdate) RemoveProduct(p ...*Product) *CommentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommentUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CommentUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := comment.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CommentUpdate) check() error {
	if v, ok := cu.mutation.Content(); ok {
		if err := comment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Comment.content": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Status(); ok {
		if err := comment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Comment.status": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Likes(); ok {
		if err := comment.LikesValidator(v); err != nil {
			return &ValidationError{Name: "likes", err: fmt.Errorf(`ent: validator failed for field "Comment.likes": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Dislikes(); ok {
		if err := comment.DislikesValidator(v); err != nil {
			return &ValidationError{Name: "dislikes", err: fmt.Errorf(`ent: validator failed for field "Comment.dislikes": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Rating(); ok {
		if err := comment.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Comment.rating": %w`, err)}
		}
	}
	if v, ok := cu.mutation.RatingCount(); ok {
		if err := comment.RatingCountValidator(v); err != nil {
			return &ValidationError{Name: "rating_count", err: fmt.Errorf(`ent: validator failed for field "Comment.rating_count": %w`, err)}
		}
	}
	return nil
}

func (cu *CommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(comment.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Likes(); ok {
		_spec.SetField(comment.FieldLikes, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedLikes(); ok {
		_spec.AddField(comment.FieldLikes, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.Dislikes(); ok {
		_spec.SetField(comment.FieldDislikes, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedDislikes(); ok {
		_spec.AddField(comment.FieldDislikes, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.Rating(); ok {
		_spec.SetField(comment.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedRating(); ok {
		_spec.AddField(comment.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.RatingCount(); ok {
		_spec.SetField(comment.FieldRatingCount, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedRatingCount(); ok {
		_spec.AddField(comment.FieldRatingCount, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.VerifiedBuyer(); ok {
		_spec.SetField(comment.FieldVerifiedBuyer, field.TypeBool, value)
	}
	if cu.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   comment.ImageTable,
			Columns: []string{comment.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   comment.ImageTable,
			Columns: []string{comment.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ConsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ConsTable,
			Columns: []string{comment.ConsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cons.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedConsIDs(); len(nodes) > 0 && !cu.mutation.ConsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ConsTable,
			Columns: []string{comment.ConsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cons.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ConsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ConsTable,
			Columns: []string{comment.ConsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cons.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ProsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ProsTable,
			Columns: []string{comment.ProsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pros.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProsIDs(); len(nodes) > 0 && !cu.mutation.ProsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ProsTable,
			Columns: []string{comment.ProsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pros.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ProsTable,
			Columns: []string{comment.ProsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pros.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.UserTable,
			Columns: comment.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedUserIDs(); len(nodes) > 0 && !cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.UserTable,
			Columns: comment.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.UserTable,
			Columns: comment.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.ProductTable,
			Columns: comment.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProductIDs(); len(nodes) > 0 && !cu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.ProductTable,
			Columns: comment.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.ProductTable,
			Columns: comment.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommentUpdateOne is the builder for updating a single Comment entity.
type CommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentMutation
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CommentUpdateOne) SetUpdateTime(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetContent sets the "content" field.
func (cuo *CommentUpdateOne) SetContent(s string) *CommentUpdateOne {
	cuo.mutation.SetContent(s)
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CommentUpdateOne) SetStatus(c comment.Status) *CommentUpdateOne {
	cuo.mutation.SetStatus(c)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableStatus(c *comment.Status) *CommentUpdateOne {
	if c != nil {
		cuo.SetStatus(*c)
	}
	return cuo
}

// SetLikes sets the "likes" field.
func (cuo *CommentUpdateOne) SetLikes(i int32) *CommentUpdateOne {
	cuo.mutation.ResetLikes()
	cuo.mutation.SetLikes(i)
	return cuo
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableLikes(i *int32) *CommentUpdateOne {
	if i != nil {
		cuo.SetLikes(*i)
	}
	return cuo
}

// AddLikes adds i to the "likes" field.
func (cuo *CommentUpdateOne) AddLikes(i int32) *CommentUpdateOne {
	cuo.mutation.AddLikes(i)
	return cuo
}

// SetDislikes sets the "dislikes" field.
func (cuo *CommentUpdateOne) SetDislikes(i int32) *CommentUpdateOne {
	cuo.mutation.ResetDislikes()
	cuo.mutation.SetDislikes(i)
	return cuo
}

// SetNillableDislikes sets the "dislikes" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableDislikes(i *int32) *CommentUpdateOne {
	if i != nil {
		cuo.SetDislikes(*i)
	}
	return cuo
}

// AddDislikes adds i to the "dislikes" field.
func (cuo *CommentUpdateOne) AddDislikes(i int32) *CommentUpdateOne {
	cuo.mutation.AddDislikes(i)
	return cuo
}

// SetRating sets the "rating" field.
func (cuo *CommentUpdateOne) SetRating(f float64) *CommentUpdateOne {
	cuo.mutation.ResetRating()
	cuo.mutation.SetRating(f)
	return cuo
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableRating(f *float64) *CommentUpdateOne {
	if f != nil {
		cuo.SetRating(*f)
	}
	return cuo
}

// AddRating adds f to the "rating" field.
func (cuo *CommentUpdateOne) AddRating(f float64) *CommentUpdateOne {
	cuo.mutation.AddRating(f)
	return cuo
}

// SetRatingCount sets the "rating_count" field.
func (cuo *CommentUpdateOne) SetRatingCount(i int32) *CommentUpdateOne {
	cuo.mutation.ResetRatingCount()
	cuo.mutation.SetRatingCount(i)
	return cuo
}

// AddRatingCount adds i to the "rating_count" field.
func (cuo *CommentUpdateOne) AddRatingCount(i int32) *CommentUpdateOne {
	cuo.mutation.AddRatingCount(i)
	return cuo
}

// SetVerifiedBuyer sets the "verified_buyer" field.
func (cuo *CommentUpdateOne) SetVerifiedBuyer(b bool) *CommentUpdateOne {
	cuo.mutation.SetVerifiedBuyer(b)
	return cuo
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (cuo *CommentUpdateOne) SetImageID(id int) *CommentUpdateOne {
	cuo.mutation.SetImageID(id)
	return cuo
}

// SetNillableImageID sets the "image" edge to the Image entity by ID if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableImageID(id *int) *CommentUpdateOne {
	if id != nil {
		cuo = cuo.SetImageID(*id)
	}
	return cuo
}

// SetImage sets the "image" edge to the Image entity.
func (cuo *CommentUpdateOne) SetImage(i *Image) *CommentUpdateOne {
	return cuo.SetImageID(i.ID)
}

// AddConIDs adds the "cons" edge to the Cons entity by IDs.
func (cuo *CommentUpdateOne) AddConIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.AddConIDs(ids...)
	return cuo
}

// AddCons adds the "cons" edges to the Cons entity.
func (cuo *CommentUpdateOne) AddCons(c ...*Cons) *CommentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddConIDs(ids...)
}

// AddProIDs adds the "pros" edge to the Pros entity by IDs.
func (cuo *CommentUpdateOne) AddProIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.AddProIDs(ids...)
	return cuo
}

// AddPros adds the "pros" edges to the Pros entity.
func (cuo *CommentUpdateOne) AddPros(p ...*Pros) *CommentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (cuo *CommentUpdateOne) AddUserIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.AddUserIDs(ids...)
	return cuo
}

// AddUser adds the "user" edges to the User entity.
func (cuo *CommentUpdateOne) AddUser(u ...*User) *CommentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddUserIDs(ids...)
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (cuo *CommentUpdateOne) AddProductIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.AddProductIDs(ids...)
	return cuo
}

// AddProduct adds the "product" edges to the Product entity.
func (cuo *CommentUpdateOne) AddProduct(p ...*Product) *CommentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProductIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (cuo *CommentUpdateOne) Mutation() *CommentMutation {
	return cuo.mutation
}

// ClearImage clears the "image" edge to the Image entity.
func (cuo *CommentUpdateOne) ClearImage() *CommentUpdateOne {
	cuo.mutation.ClearImage()
	return cuo
}

// ClearCons clears all "cons" edges to the Cons entity.
func (cuo *CommentUpdateOne) ClearCons() *CommentUpdateOne {
	cuo.mutation.ClearCons()
	return cuo
}

// RemoveConIDs removes the "cons" edge to Cons entities by IDs.
func (cuo *CommentUpdateOne) RemoveConIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.RemoveConIDs(ids...)
	return cuo
}

// RemoveCons removes "cons" edges to Cons entities.
func (cuo *CommentUpdateOne) RemoveCons(c ...*Cons) *CommentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveConIDs(ids...)
}

// ClearPros clears all "pros" edges to the Pros entity.
func (cuo *CommentUpdateOne) ClearPros() *CommentUpdateOne {
	cuo.mutation.ClearPros()
	return cuo
}

// RemoveProIDs removes the "pros" edge to Pros entities by IDs.
func (cuo *CommentUpdateOne) RemoveProIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.RemoveProIDs(ids...)
	return cuo
}

// RemovePros removes "pros" edges to Pros entities.
func (cuo *CommentUpdateOne) RemovePros(p ...*Pros) *CommentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (cuo *CommentUpdateOne) ClearUser() *CommentUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (cuo *CommentUpdateOne) RemoveUserIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.RemoveUserIDs(ids...)
	return cuo
}

// RemoveUser removes "user" edges to User entities.
func (cuo *CommentUpdateOne) RemoveUser(u ...*User) *CommentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveUserIDs(ids...)
}

// ClearProduct clears all "product" edges to the Product entity.
func (cuo *CommentUpdateOne) ClearProduct() *CommentUpdateOne {
	cuo.mutation.ClearProduct()
	return cuo
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (cuo *CommentUpdateOne) RemoveProductIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.RemoveProductIDs(ids...)
	return cuo
}

// RemoveProduct removes "product" edges to Product entities.
func (cuo *CommentUpdateOne) RemoveProduct(p ...*Product) *CommentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProductIDs(ids...)
}

// Where appends a list predicates to the CommentUpdate builder.
func (cuo *CommentUpdateOne) Where(ps ...predicate.Comment) *CommentUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommentUpdateOne) Select(field string, fields ...string) *CommentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Comment entity.
func (cuo *CommentUpdateOne) Save(ctx context.Context) (*Comment, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommentUpdateOne) SaveX(ctx context.Context) *Comment {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CommentUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := comment.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CommentUpdateOne) check() error {
	if v, ok := cuo.mutation.Content(); ok {
		if err := comment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Comment.content": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Status(); ok {
		if err := comment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Comment.status": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Likes(); ok {
		if err := comment.LikesValidator(v); err != nil {
			return &ValidationError{Name: "likes", err: fmt.Errorf(`ent: validator failed for field "Comment.likes": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Dislikes(); ok {
		if err := comment.DislikesValidator(v); err != nil {
			return &ValidationError{Name: "dislikes", err: fmt.Errorf(`ent: validator failed for field "Comment.dislikes": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Rating(); ok {
		if err := comment.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Comment.rating": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.RatingCount(); ok {
		if err := comment.RatingCountValidator(v); err != nil {
			return &ValidationError{Name: "rating_count", err: fmt.Errorf(`ent: validator failed for field "Comment.rating_count": %w`, err)}
		}
	}
	return nil
}

func (cuo *CommentUpdateOne) sqlSave(ctx context.Context) (_node *Comment, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Comment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comment.FieldID)
		for _, f := range fields {
			if !comment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != comment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(comment.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Likes(); ok {
		_spec.SetField(comment.FieldLikes, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedLikes(); ok {
		_spec.AddField(comment.FieldLikes, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.Dislikes(); ok {
		_spec.SetField(comment.FieldDislikes, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedDislikes(); ok {
		_spec.AddField(comment.FieldDislikes, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.Rating(); ok {
		_spec.SetField(comment.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedRating(); ok {
		_spec.AddField(comment.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.RatingCount(); ok {
		_spec.SetField(comment.FieldRatingCount, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedRatingCount(); ok {
		_spec.AddField(comment.FieldRatingCount, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.VerifiedBuyer(); ok {
		_spec.SetField(comment.FieldVerifiedBuyer, field.TypeBool, value)
	}
	if cuo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   comment.ImageTable,
			Columns: []string{comment.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   comment.ImageTable,
			Columns: []string{comment.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ConsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ConsTable,
			Columns: []string{comment.ConsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cons.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedConsIDs(); len(nodes) > 0 && !cuo.mutation.ConsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ConsTable,
			Columns: []string{comment.ConsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cons.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ConsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ConsTable,
			Columns: []string{comment.ConsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cons.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ProsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ProsTable,
			Columns: []string{comment.ProsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pros.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProsIDs(); len(nodes) > 0 && !cuo.mutation.ProsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ProsTable,
			Columns: []string{comment.ProsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pros.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ProsTable,
			Columns: []string{comment.ProsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pros.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.UserTable,
			Columns: comment.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.UserTable,
			Columns: comment.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.UserTable,
			Columns: comment.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.ProductTable,
			Columns: comment.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProductIDs(); len(nodes) > 0 && !cuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.ProductTable,
			Columns: comment.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.ProductTable,
			Columns: comment.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Comment{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
