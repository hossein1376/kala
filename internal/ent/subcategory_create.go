// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kala/internal/ent/category"
	"kala/internal/ent/image"
	"kala/internal/ent/product"
	"kala/internal/ent/subcategory"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubCategoryCreate is the builder for creating a SubCategory entity.
type SubCategoryCreate struct {
	config
	mutation *SubCategoryMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (scc *SubCategoryCreate) SetCreateTime(t time.Time) *SubCategoryCreate {
	scc.mutation.SetCreateTime(t)
	return scc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (scc *SubCategoryCreate) SetNillableCreateTime(t *time.Time) *SubCategoryCreate {
	if t != nil {
		scc.SetCreateTime(*t)
	}
	return scc
}

// SetUpdateTime sets the "update_time" field.
func (scc *SubCategoryCreate) SetUpdateTime(t time.Time) *SubCategoryCreate {
	scc.mutation.SetUpdateTime(t)
	return scc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (scc *SubCategoryCreate) SetNillableUpdateTime(t *time.Time) *SubCategoryCreate {
	if t != nil {
		scc.SetUpdateTime(*t)
	}
	return scc
}

// SetName sets the "name" field.
func (scc *SubCategoryCreate) SetName(s string) *SubCategoryCreate {
	scc.mutation.SetName(s)
	return scc
}

// SetDescription sets the "description" field.
func (scc *SubCategoryCreate) SetDescription(s string) *SubCategoryCreate {
	scc.mutation.SetDescription(s)
	return scc
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (scc *SubCategoryCreate) SetImageID(id int) *SubCategoryCreate {
	scc.mutation.SetImageID(id)
	return scc
}

// SetNillableImageID sets the "image" edge to the Image entity by ID if the given value is not nil.
func (scc *SubCategoryCreate) SetNillableImageID(id *int) *SubCategoryCreate {
	if id != nil {
		scc = scc.SetImageID(*id)
	}
	return scc
}

// SetImage sets the "image" edge to the Image entity.
func (scc *SubCategoryCreate) SetImage(i *Image) *SubCategoryCreate {
	return scc.SetImageID(i.ID)
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (scc *SubCategoryCreate) AddProductIDs(ids ...int) *SubCategoryCreate {
	scc.mutation.AddProductIDs(ids...)
	return scc
}

// AddProduct adds the "product" edges to the Product entity.
func (scc *SubCategoryCreate) AddProduct(p ...*Product) *SubCategoryCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return scc.AddProductIDs(ids...)
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (scc *SubCategoryCreate) SetCategoryID(id int) *SubCategoryCreate {
	scc.mutation.SetCategoryID(id)
	return scc
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (scc *SubCategoryCreate) SetNillableCategoryID(id *int) *SubCategoryCreate {
	if id != nil {
		scc = scc.SetCategoryID(*id)
	}
	return scc
}

// SetCategory sets the "category" edge to the Category entity.
func (scc *SubCategoryCreate) SetCategory(c *Category) *SubCategoryCreate {
	return scc.SetCategoryID(c.ID)
}

// Mutation returns the SubCategoryMutation object of the builder.
func (scc *SubCategoryCreate) Mutation() *SubCategoryMutation {
	return scc.mutation
}

// Save creates the SubCategory in the database.
func (scc *SubCategoryCreate) Save(ctx context.Context) (*SubCategory, error) {
	scc.defaults()
	return withHooks(ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *SubCategoryCreate) SaveX(ctx context.Context) *SubCategory {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *SubCategoryCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *SubCategoryCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *SubCategoryCreate) defaults() {
	if _, ok := scc.mutation.CreateTime(); !ok {
		v := subcategory.DefaultCreateTime()
		scc.mutation.SetCreateTime(v)
	}
	if _, ok := scc.mutation.UpdateTime(); !ok {
		v := subcategory.DefaultUpdateTime()
		scc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *SubCategoryCreate) check() error {
	if _, ok := scc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SubCategory.create_time"`)}
	}
	if _, ok := scc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SubCategory.update_time"`)}
	}
	if _, ok := scc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SubCategory.name"`)}
	}
	if v, ok := scc.mutation.Name(); ok {
		if err := subcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SubCategory.name": %w`, err)}
		}
	}
	if _, ok := scc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "SubCategory.description"`)}
	}
	if v, ok := scc.mutation.Description(); ok {
		if err := subcategory.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "SubCategory.description": %w`, err)}
		}
	}
	return nil
}

func (scc *SubCategoryCreate) sqlSave(ctx context.Context) (*SubCategory, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *SubCategoryCreate) createSpec() (*SubCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &SubCategory{config: scc.config}
		_spec = sqlgraph.NewCreateSpec(subcategory.Table, sqlgraph.NewFieldSpec(subcategory.FieldID, field.TypeInt))
	)
	if value, ok := scc.mutation.CreateTime(); ok {
		_spec.SetField(subcategory.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := scc.mutation.UpdateTime(); ok {
		_spec.SetField(subcategory.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := scc.mutation.Name(); ok {
		_spec.SetField(subcategory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := scc.mutation.Description(); ok {
		_spec.SetField(subcategory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := scc.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcategory.ImageTable,
			Columns: []string{subcategory.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.image = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcategory.ProductTable,
			Columns: subcategory.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scc.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcategory.CategoryTable,
			Columns: []string{subcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.category = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubCategoryCreateBulk is the builder for creating many SubCategory entities in bulk.
type SubCategoryCreateBulk struct {
	config
	builders []*SubCategoryCreate
}

// Save creates the SubCategory entities in the database.
func (sccb *SubCategoryCreateBulk) Save(ctx context.Context) ([]*SubCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*SubCategory, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *SubCategoryCreateBulk) SaveX(ctx context.Context) []*SubCategory {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *SubCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *SubCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}
