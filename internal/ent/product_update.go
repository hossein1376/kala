// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hossein1376/kala/internal/ent/order"
	"github.com/hossein1376/kala/internal/ent/predicate"
	"github.com/hossein1376/kala/internal/ent/product"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *ProductUpdate) SetUpdateTime(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProductUpdate) SetDescription(s string) *ProductUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetReview sets the "review" field.
func (pu *ProductUpdate) SetReview(s string) *ProductUpdate {
	pu.mutation.SetReview(s)
	return pu
}

// SetRating sets the "rating" field.
func (pu *ProductUpdate) SetRating(f float64) *ProductUpdate {
	pu.mutation.ResetRating()
	pu.mutation.SetRating(f)
	return pu
}

// AddRating adds f to the "rating" field.
func (pu *ProductUpdate) AddRating(f float64) *ProductUpdate {
	pu.mutation.AddRating(f)
	return pu
}

// SetRatingCount sets the "rating_count" field.
func (pu *ProductUpdate) SetRatingCount(i int32) *ProductUpdate {
	pu.mutation.ResetRatingCount()
	pu.mutation.SetRatingCount(i)
	return pu
}

// AddRatingCount adds i to the "rating_count" field.
func (pu *ProductUpdate) AddRatingCount(i int32) *ProductUpdate {
	pu.mutation.AddRatingCount(i)
	return pu
}

// SetPrice sets the "price" field.
func (pu *ProductUpdate) SetPrice(i int32) *ProductUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(i)
	return pu
}

// AddPrice adds i to the "price" field.
func (pu *ProductUpdate) AddPrice(i int32) *ProductUpdate {
	pu.mutation.AddPrice(i)
	return pu
}

// SetQuantity sets the "quantity" field.
func (pu *ProductUpdate) SetQuantity(i int32) *ProductUpdate {
	pu.mutation.ResetQuantity()
	pu.mutation.SetQuantity(i)
	return pu
}

// AddQuantity adds i to the "quantity" field.
func (pu *ProductUpdate) AddQuantity(i int32) *ProductUpdate {
	pu.mutation.AddQuantity(i)
	return pu
}

// SetAvailable sets the "available" field.
func (pu *ProductUpdate) SetAvailable(b bool) *ProductUpdate {
	pu.mutation.SetAvailable(b)
	return pu
}

// SetStatus sets the "status" field.
func (pu *ProductUpdate) SetStatus(b bool) *ProductUpdate {
	pu.mutation.SetStatus(b)
	return pu
}

// AddOrderIDs adds the "order" edge to the Order entity by IDs.
func (pu *ProductUpdate) AddOrderIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddOrderIDs(ids...)
	return pu
}

// AddOrder adds the "order" edges to the Order entity.
func (pu *ProductUpdate) AddOrder(o ...*Order) *ProductUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOrderIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearOrder clears all "order" edges to the Order entity.
func (pu *ProductUpdate) ClearOrder() *ProductUpdate {
	pu.mutation.ClearOrder()
	return pu
}

// RemoveOrderIDs removes the "order" edge to Order entities by IDs.
func (pu *ProductUpdate) RemoveOrderIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveOrderIDs(ids...)
	return pu
}

// RemoveOrder removes "order" edges to Order entities.
func (pu *ProductUpdate) RemoveOrder(o ...*Order) *ProductUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := product.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Description(); ok {
		if err := product.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Product.description": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Rating(); ok {
		if err := product.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Product.rating": %w`, err)}
		}
	}
	if v, ok := pu.mutation.RatingCount(); ok {
		if err := product.RatingCountValidator(v); err != nil {
			return &ValidationError{Name: "rating_count", err: fmt.Errorf(`ent: validator failed for field "Product.rating_count": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Price(); ok {
		if err := product.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Product.price": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Quantity(); ok {
		if err := product.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "Product.quantity": %w`, err)}
		}
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(product.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.Review(); ok {
		_spec.SetField(product.FieldReview, field.TypeString, value)
	}
	if value, ok := pu.mutation.Rating(); ok {
		_spec.SetField(product.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedRating(); ok {
		_spec.AddField(product.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.RatingCount(); ok {
		_spec.SetField(product.FieldRatingCount, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedRatingCount(); ok {
		_spec.AddField(product.FieldRatingCount, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.AddField(product.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.Quantity(); ok {
		_spec.SetField(product.FieldQuantity, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedQuantity(); ok {
		_spec.AddField(product.FieldQuantity, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.Available(); ok {
		_spec.SetField(product.FieldAvailable, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeBool, value)
	}
	if pu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.OrderTable,
			Columns: product.OrderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOrderIDs(); len(nodes) > 0 && !pu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.OrderTable,
			Columns: product.OrderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.OrderTable,
			Columns: product.OrderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetUpdateTime sets the "update_time" field.
func (puo *ProductUpdateOne) SetUpdateTime(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProductUpdateOne) SetDescription(s string) *ProductUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetReview sets the "review" field.
func (puo *ProductUpdateOne) SetReview(s string) *ProductUpdateOne {
	puo.mutation.SetReview(s)
	return puo
}

// SetRating sets the "rating" field.
func (puo *ProductUpdateOne) SetRating(f float64) *ProductUpdateOne {
	puo.mutation.ResetRating()
	puo.mutation.SetRating(f)
	return puo
}

// AddRating adds f to the "rating" field.
func (puo *ProductUpdateOne) AddRating(f float64) *ProductUpdateOne {
	puo.mutation.AddRating(f)
	return puo
}

// SetRatingCount sets the "rating_count" field.
func (puo *ProductUpdateOne) SetRatingCount(i int32) *ProductUpdateOne {
	puo.mutation.ResetRatingCount()
	puo.mutation.SetRatingCount(i)
	return puo
}

// AddRatingCount adds i to the "rating_count" field.
func (puo *ProductUpdateOne) AddRatingCount(i int32) *ProductUpdateOne {
	puo.mutation.AddRatingCount(i)
	return puo
}

// SetPrice sets the "price" field.
func (puo *ProductUpdateOne) SetPrice(i int32) *ProductUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(i)
	return puo
}

// AddPrice adds i to the "price" field.
func (puo *ProductUpdateOne) AddPrice(i int32) *ProductUpdateOne {
	puo.mutation.AddPrice(i)
	return puo
}

// SetQuantity sets the "quantity" field.
func (puo *ProductUpdateOne) SetQuantity(i int32) *ProductUpdateOne {
	puo.mutation.ResetQuantity()
	puo.mutation.SetQuantity(i)
	return puo
}

// AddQuantity adds i to the "quantity" field.
func (puo *ProductUpdateOne) AddQuantity(i int32) *ProductUpdateOne {
	puo.mutation.AddQuantity(i)
	return puo
}

// SetAvailable sets the "available" field.
func (puo *ProductUpdateOne) SetAvailable(b bool) *ProductUpdateOne {
	puo.mutation.SetAvailable(b)
	return puo
}

// SetStatus sets the "status" field.
func (puo *ProductUpdateOne) SetStatus(b bool) *ProductUpdateOne {
	puo.mutation.SetStatus(b)
	return puo
}

// AddOrderIDs adds the "order" edge to the Order entity by IDs.
func (puo *ProductUpdateOne) AddOrderIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddOrderIDs(ids...)
	return puo
}

// AddOrder adds the "order" edges to the Order entity.
func (puo *ProductUpdateOne) AddOrder(o ...*Order) *ProductUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOrderIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearOrder clears all "order" edges to the Order entity.
func (puo *ProductUpdateOne) ClearOrder() *ProductUpdateOne {
	puo.mutation.ClearOrder()
	return puo
}

// RemoveOrderIDs removes the "order" edge to Order entities by IDs.
func (puo *ProductUpdateOne) RemoveOrderIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveOrderIDs(ids...)
	return puo
}

// RemoveOrder removes "order" edges to Order entities.
func (puo *ProductUpdateOne) RemoveOrder(o ...*Order) *ProductUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOrderIDs(ids...)
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := product.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Description(); ok {
		if err := product.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Product.description": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Rating(); ok {
		if err := product.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Product.rating": %w`, err)}
		}
	}
	if v, ok := puo.mutation.RatingCount(); ok {
		if err := product.RatingCountValidator(v); err != nil {
			return &ValidationError{Name: "rating_count", err: fmt.Errorf(`ent: validator failed for field "Product.rating_count": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Price(); ok {
		if err := product.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Product.price": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Quantity(); ok {
		if err := product.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "Product.quantity": %w`, err)}
		}
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(product.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.Review(); ok {
		_spec.SetField(product.FieldReview, field.TypeString, value)
	}
	if value, ok := puo.mutation.Rating(); ok {
		_spec.SetField(product.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedRating(); ok {
		_spec.AddField(product.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.RatingCount(); ok {
		_spec.SetField(product.FieldRatingCount, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedRatingCount(); ok {
		_spec.AddField(product.FieldRatingCount, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.AddField(product.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.Quantity(); ok {
		_spec.SetField(product.FieldQuantity, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedQuantity(); ok {
		_spec.AddField(product.FieldQuantity, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.Available(); ok {
		_spec.SetField(product.FieldAvailable, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeBool, value)
	}
	if puo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.OrderTable,
			Columns: product.OrderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOrderIDs(); len(nodes) > 0 && !puo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.OrderTable,
			Columns: product.OrderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.OrderTable,
			Columns: product.OrderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
