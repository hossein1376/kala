// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hossein1376/kala/internal/ent/logs"
	"github.com/hossein1376/kala/internal/ent/predicate"
	"github.com/hossein1376/kala/internal/ent/user"
)

// LogsUpdate is the builder for updating Logs entities.
type LogsUpdate struct {
	config
	hooks    []Hook
	mutation *LogsMutation
}

// Where appends a list predicates to the LogsUpdate builder.
func (lu *LogsUpdate) Where(ps ...predicate.Logs) *LogsUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetAction sets the "action" field.
func (lu *LogsUpdate) SetAction(s string) *LogsUpdate {
	lu.mutation.SetAction(s)
	return lu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableAction(s *string) *LogsUpdate {
	if s != nil {
		lu.SetAction(*s)
	}
	return lu
}

// ClearAction clears the value of the "action" field.
func (lu *LogsUpdate) ClearAction() *LogsUpdate {
	lu.mutation.ClearAction()
	return lu
}

// SetIP sets the "IP" field.
func (lu *LogsUpdate) SetIP(s string) *LogsUpdate {
	lu.mutation.SetIP(s)
	return lu
}

// SetAgent sets the "agent" field.
func (lu *LogsUpdate) SetAgent(s string) *LogsUpdate {
	lu.mutation.SetAgent(s)
	return lu
}

// SetDate sets the "date" field.
func (lu *LogsUpdate) SetDate(t time.Time) *LogsUpdate {
	lu.mutation.SetDate(t)
	return lu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (lu *LogsUpdate) SetUserID(id int) *LogsUpdate {
	lu.mutation.SetUserID(id)
	return lu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (lu *LogsUpdate) SetNillableUserID(id *int) *LogsUpdate {
	if id != nil {
		lu = lu.SetUserID(*id)
	}
	return lu
}

// SetUser sets the "user" edge to the User entity.
func (lu *LogsUpdate) SetUser(u *User) *LogsUpdate {
	return lu.SetUserID(u.ID)
}

// Mutation returns the LogsMutation object of the builder.
func (lu *LogsUpdate) Mutation() *LogsMutation {
	return lu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lu *LogsUpdate) ClearUser() *LogsUpdate {
	lu.mutation.ClearUser()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LogsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LogsUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LogsUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LogsUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LogsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(logs.Table, logs.Columns, sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Action(); ok {
		_spec.SetField(logs.FieldAction, field.TypeString, value)
	}
	if lu.mutation.ActionCleared() {
		_spec.ClearField(logs.FieldAction, field.TypeString)
	}
	if value, ok := lu.mutation.IP(); ok {
		_spec.SetField(logs.FieldIP, field.TypeString, value)
	}
	if value, ok := lu.mutation.Agent(); ok {
		_spec.SetField(logs.FieldAgent, field.TypeString, value)
	}
	if value, ok := lu.mutation.Date(); ok {
		_spec.SetField(logs.FieldDate, field.TypeTime, value)
	}
	if lu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   logs.UserTable,
			Columns: []string{logs.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   logs.UserTable,
			Columns: []string{logs.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LogsUpdateOne is the builder for updating a single Logs entity.
type LogsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LogsMutation
}

// SetAction sets the "action" field.
func (luo *LogsUpdateOne) SetAction(s string) *LogsUpdateOne {
	luo.mutation.SetAction(s)
	return luo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableAction(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetAction(*s)
	}
	return luo
}

// ClearAction clears the value of the "action" field.
func (luo *LogsUpdateOne) ClearAction() *LogsUpdateOne {
	luo.mutation.ClearAction()
	return luo
}

// SetIP sets the "IP" field.
func (luo *LogsUpdateOne) SetIP(s string) *LogsUpdateOne {
	luo.mutation.SetIP(s)
	return luo
}

// SetAgent sets the "agent" field.
func (luo *LogsUpdateOne) SetAgent(s string) *LogsUpdateOne {
	luo.mutation.SetAgent(s)
	return luo
}

// SetDate sets the "date" field.
func (luo *LogsUpdateOne) SetDate(t time.Time) *LogsUpdateOne {
	luo.mutation.SetDate(t)
	return luo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (luo *LogsUpdateOne) SetUserID(id int) *LogsUpdateOne {
	luo.mutation.SetUserID(id)
	return luo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableUserID(id *int) *LogsUpdateOne {
	if id != nil {
		luo = luo.SetUserID(*id)
	}
	return luo
}

// SetUser sets the "user" edge to the User entity.
func (luo *LogsUpdateOne) SetUser(u *User) *LogsUpdateOne {
	return luo.SetUserID(u.ID)
}

// Mutation returns the LogsMutation object of the builder.
func (luo *LogsUpdateOne) Mutation() *LogsMutation {
	return luo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (luo *LogsUpdateOne) ClearUser() *LogsUpdateOne {
	luo.mutation.ClearUser()
	return luo
}

// Where appends a list predicates to the LogsUpdate builder.
func (luo *LogsUpdateOne) Where(ps ...predicate.Logs) *LogsUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LogsUpdateOne) Select(field string, fields ...string) *LogsUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Logs entity.
func (luo *LogsUpdateOne) Save(ctx context.Context) (*Logs, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LogsUpdateOne) SaveX(ctx context.Context) *Logs {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LogsUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LogsUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LogsUpdateOne) sqlSave(ctx context.Context) (_node *Logs, err error) {
	_spec := sqlgraph.NewUpdateSpec(logs.Table, logs.Columns, sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Logs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logs.FieldID)
		for _, f := range fields {
			if !logs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != logs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Action(); ok {
		_spec.SetField(logs.FieldAction, field.TypeString, value)
	}
	if luo.mutation.ActionCleared() {
		_spec.ClearField(logs.FieldAction, field.TypeString)
	}
	if value, ok := luo.mutation.IP(); ok {
		_spec.SetField(logs.FieldIP, field.TypeString, value)
	}
	if value, ok := luo.mutation.Agent(); ok {
		_spec.SetField(logs.FieldAgent, field.TypeString, value)
	}
	if value, ok := luo.mutation.Date(); ok {
		_spec.SetField(logs.FieldDate, field.TypeTime, value)
	}
	if luo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   logs.UserTable,
			Columns: []string{logs.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   logs.UserTable,
			Columns: []string{logs.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Logs{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
