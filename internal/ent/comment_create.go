// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hossein1376/kala/internal/ent/comment"
	"github.com/hossein1376/kala/internal/ent/cons"
	"github.com/hossein1376/kala/internal/ent/image"
	"github.com/hossein1376/kala/internal/ent/product"
	"github.com/hossein1376/kala/internal/ent/pros"
	"github.com/hossein1376/kala/internal/ent/user"
)

// CommentCreate is the builder for creating a Comment entity.
type CommentCreate struct {
	config
	mutation *CommentMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (cc *CommentCreate) SetCreateTime(t time.Time) *CommentCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *CommentCreate) SetNillableCreateTime(t *time.Time) *CommentCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *CommentCreate) SetUpdateTime(t time.Time) *CommentCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *CommentCreate) SetNillableUpdateTime(t *time.Time) *CommentCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetContent sets the "content" field.
func (cc *CommentCreate) SetContent(s string) *CommentCreate {
	cc.mutation.SetContent(s)
	return cc
}

// SetStatus sets the "status" field.
func (cc *CommentCreate) SetStatus(c comment.Status) *CommentCreate {
	cc.mutation.SetStatus(c)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *CommentCreate) SetNillableStatus(c *comment.Status) *CommentCreate {
	if c != nil {
		cc.SetStatus(*c)
	}
	return cc
}

// SetLikes sets the "likes" field.
func (cc *CommentCreate) SetLikes(i int32) *CommentCreate {
	cc.mutation.SetLikes(i)
	return cc
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (cc *CommentCreate) SetNillableLikes(i *int32) *CommentCreate {
	if i != nil {
		cc.SetLikes(*i)
	}
	return cc
}

// SetDislikes sets the "dislikes" field.
func (cc *CommentCreate) SetDislikes(i int32) *CommentCreate {
	cc.mutation.SetDislikes(i)
	return cc
}

// SetNillableDislikes sets the "dislikes" field if the given value is not nil.
func (cc *CommentCreate) SetNillableDislikes(i *int32) *CommentCreate {
	if i != nil {
		cc.SetDislikes(*i)
	}
	return cc
}

// SetRating sets the "rating" field.
func (cc *CommentCreate) SetRating(f float64) *CommentCreate {
	cc.mutation.SetRating(f)
	return cc
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (cc *CommentCreate) SetNillableRating(f *float64) *CommentCreate {
	if f != nil {
		cc.SetRating(*f)
	}
	return cc
}

// SetRatingCount sets the "rating_count" field.
func (cc *CommentCreate) SetRatingCount(i int32) *CommentCreate {
	cc.mutation.SetRatingCount(i)
	return cc
}

// SetVerifiedBuyer sets the "verified_buyer" field.
func (cc *CommentCreate) SetVerifiedBuyer(b bool) *CommentCreate {
	cc.mutation.SetVerifiedBuyer(b)
	return cc
}

// AddImageIDs adds the "image" edge to the Image entity by IDs.
func (cc *CommentCreate) AddImageIDs(ids ...int) *CommentCreate {
	cc.mutation.AddImageIDs(ids...)
	return cc
}

// AddImage adds the "image" edges to the Image entity.
func (cc *CommentCreate) AddImage(i ...*Image) *CommentCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cc.AddImageIDs(ids...)
}

// AddConIDs adds the "cons" edge to the Cons entity by IDs.
func (cc *CommentCreate) AddConIDs(ids ...int) *CommentCreate {
	cc.mutation.AddConIDs(ids...)
	return cc
}

// AddCons adds the "cons" edges to the Cons entity.
func (cc *CommentCreate) AddCons(c ...*Cons) *CommentCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddConIDs(ids...)
}

// AddProIDs adds the "pros" edge to the Pros entity by IDs.
func (cc *CommentCreate) AddProIDs(ids ...int) *CommentCreate {
	cc.mutation.AddProIDs(ids...)
	return cc
}

// AddPros adds the "pros" edges to the Pros entity.
func (cc *CommentCreate) AddPros(p ...*Pros) *CommentCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddProIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (cc *CommentCreate) AddUserIDs(ids ...int) *CommentCreate {
	cc.mutation.AddUserIDs(ids...)
	return cc
}

// AddUser adds the "user" edges to the User entity.
func (cc *CommentCreate) AddUser(u ...*User) *CommentCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cc.AddUserIDs(ids...)
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (cc *CommentCreate) AddProductIDs(ids ...int) *CommentCreate {
	cc.mutation.AddProductIDs(ids...)
	return cc
}

// AddProduct adds the "product" edges to the Product entity.
func (cc *CommentCreate) AddProduct(p ...*Product) *CommentCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddProductIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (cc *CommentCreate) Mutation() *CommentMutation {
	return cc.mutation
}

// Save creates the Comment in the database.
func (cc *CommentCreate) Save(ctx context.Context) (*Comment, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CommentCreate) SaveX(ctx context.Context) *Comment {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CommentCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CommentCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CommentCreate) defaults() {
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := comment.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		v := comment.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
	if _, ok := cc.mutation.Status(); !ok {
		v := comment.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.Likes(); !ok {
		v := comment.DefaultLikes
		cc.mutation.SetLikes(v)
	}
	if _, ok := cc.mutation.Dislikes(); !ok {
		v := comment.DefaultDislikes
		cc.mutation.SetDislikes(v)
	}
	if _, ok := cc.mutation.Rating(); !ok {
		v := comment.DefaultRating
		cc.mutation.SetRating(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CommentCreate) check() error {
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Comment.create_time"`)}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Comment.update_time"`)}
	}
	if _, ok := cc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Comment.content"`)}
	}
	if v, ok := cc.mutation.Content(); ok {
		if err := comment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Comment.content": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Comment.status"`)}
	}
	if v, ok := cc.mutation.Status(); ok {
		if err := comment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Comment.status": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Likes(); !ok {
		return &ValidationError{Name: "likes", err: errors.New(`ent: missing required field "Comment.likes"`)}
	}
	if v, ok := cc.mutation.Likes(); ok {
		if err := comment.LikesValidator(v); err != nil {
			return &ValidationError{Name: "likes", err: fmt.Errorf(`ent: validator failed for field "Comment.likes": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Dislikes(); !ok {
		return &ValidationError{Name: "dislikes", err: errors.New(`ent: missing required field "Comment.dislikes"`)}
	}
	if v, ok := cc.mutation.Dislikes(); ok {
		if err := comment.DislikesValidator(v); err != nil {
			return &ValidationError{Name: "dislikes", err: fmt.Errorf(`ent: validator failed for field "Comment.dislikes": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Rating(); !ok {
		return &ValidationError{Name: "rating", err: errors.New(`ent: missing required field "Comment.rating"`)}
	}
	if v, ok := cc.mutation.Rating(); ok {
		if err := comment.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Comment.rating": %w`, err)}
		}
	}
	if _, ok := cc.mutation.RatingCount(); !ok {
		return &ValidationError{Name: "rating_count", err: errors.New(`ent: missing required field "Comment.rating_count"`)}
	}
	if v, ok := cc.mutation.RatingCount(); ok {
		if err := comment.RatingCountValidator(v); err != nil {
			return &ValidationError{Name: "rating_count", err: fmt.Errorf(`ent: validator failed for field "Comment.rating_count": %w`, err)}
		}
	}
	if _, ok := cc.mutation.VerifiedBuyer(); !ok {
		return &ValidationError{Name: "verified_buyer", err: errors.New(`ent: missing required field "Comment.verified_buyer"`)}
	}
	return nil
}

func (cc *CommentCreate) sqlSave(ctx context.Context) (*Comment, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CommentCreate) createSpec() (*Comment, *sqlgraph.CreateSpec) {
	var (
		_node = &Comment{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(comment.Table, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(comment.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(comment.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := cc.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.Likes(); ok {
		_spec.SetField(comment.FieldLikes, field.TypeInt32, value)
		_node.Likes = value
	}
	if value, ok := cc.mutation.Dislikes(); ok {
		_spec.SetField(comment.FieldDislikes, field.TypeInt32, value)
		_node.Dislikes = value
	}
	if value, ok := cc.mutation.Rating(); ok {
		_spec.SetField(comment.FieldRating, field.TypeFloat64, value)
		_node.Rating = value
	}
	if value, ok := cc.mutation.RatingCount(); ok {
		_spec.SetField(comment.FieldRatingCount, field.TypeInt32, value)
		_node.RatingCount = value
	}
	if value, ok := cc.mutation.VerifiedBuyer(); ok {
		_spec.SetField(comment.FieldVerifiedBuyer, field.TypeBool, value)
		_node.VerifiedBuyer = value
	}
	if nodes := cc.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comment.ImageTable,
			Columns: comment.ImagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ConsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ConsTable,
			Columns: []string{comment.ConsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cons.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ProsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ProsTable,
			Columns: []string{comment.ProsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pros.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.UserTable,
			Columns: comment.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.ProductTable,
			Columns: comment.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CommentCreateBulk is the builder for creating many Comment entities in bulk.
type CommentCreateBulk struct {
	config
	builders []*CommentCreate
}

// Save creates the Comment entities in the database.
func (ccb *CommentCreateBulk) Save(ctx context.Context) ([]*Comment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Comment, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CommentCreateBulk) SaveX(ctx context.Context) []*Comment {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CommentCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CommentCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
