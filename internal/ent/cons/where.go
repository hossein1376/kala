// Code generated by ent, DO NOT EDIT.

package cons

import (
	"kala/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Cons {
	return predicate.Cons(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Cons {
	return predicate.Cons(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Cons {
	return predicate.Cons(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Cons {
	return predicate.Cons(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Cons {
	return predicate.Cons(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Cons {
	return predicate.Cons(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Cons {
	return predicate.Cons(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Cons {
	return predicate.Cons(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Cons {
	return predicate.Cons(sql.FieldLTE(FieldID, id))
}

// Con applies equality check predicate on the "con" field. It's identical to ConEQ.
func Con(v string) predicate.Cons {
	return predicate.Cons(sql.FieldEQ(FieldCon, v))
}

// ConEQ applies the EQ predicate on the "con" field.
func ConEQ(v string) predicate.Cons {
	return predicate.Cons(sql.FieldEQ(FieldCon, v))
}

// ConNEQ applies the NEQ predicate on the "con" field.
func ConNEQ(v string) predicate.Cons {
	return predicate.Cons(sql.FieldNEQ(FieldCon, v))
}

// ConIn applies the In predicate on the "con" field.
func ConIn(vs ...string) predicate.Cons {
	return predicate.Cons(sql.FieldIn(FieldCon, vs...))
}

// ConNotIn applies the NotIn predicate on the "con" field.
func ConNotIn(vs ...string) predicate.Cons {
	return predicate.Cons(sql.FieldNotIn(FieldCon, vs...))
}

// ConGT applies the GT predicate on the "con" field.
func ConGT(v string) predicate.Cons {
	return predicate.Cons(sql.FieldGT(FieldCon, v))
}

// ConGTE applies the GTE predicate on the "con" field.
func ConGTE(v string) predicate.Cons {
	return predicate.Cons(sql.FieldGTE(FieldCon, v))
}

// ConLT applies the LT predicate on the "con" field.
func ConLT(v string) predicate.Cons {
	return predicate.Cons(sql.FieldLT(FieldCon, v))
}

// ConLTE applies the LTE predicate on the "con" field.
func ConLTE(v string) predicate.Cons {
	return predicate.Cons(sql.FieldLTE(FieldCon, v))
}

// ConContains applies the Contains predicate on the "con" field.
func ConContains(v string) predicate.Cons {
	return predicate.Cons(sql.FieldContains(FieldCon, v))
}

// ConHasPrefix applies the HasPrefix predicate on the "con" field.
func ConHasPrefix(v string) predicate.Cons {
	return predicate.Cons(sql.FieldHasPrefix(FieldCon, v))
}

// ConHasSuffix applies the HasSuffix predicate on the "con" field.
func ConHasSuffix(v string) predicate.Cons {
	return predicate.Cons(sql.FieldHasSuffix(FieldCon, v))
}

// ConEqualFold applies the EqualFold predicate on the "con" field.
func ConEqualFold(v string) predicate.Cons {
	return predicate.Cons(sql.FieldEqualFold(FieldCon, v))
}

// ConContainsFold applies the ContainsFold predicate on the "con" field.
func ConContainsFold(v string) predicate.Cons {
	return predicate.Cons(sql.FieldContainsFold(FieldCon, v))
}

// HasComment applies the HasEdge predicate on the "comment" edge.
func HasComment() predicate.Cons {
	return predicate.Cons(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CommentTable, CommentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentWith applies the HasEdge predicate on the "comment" edge with a given conditions (other predicates).
func HasCommentWith(preds ...predicate.Comment) predicate.Cons {
	return predicate.Cons(func(s *sql.Selector) {
		step := newCommentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Cons) predicate.Cons {
	return predicate.Cons(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Cons) predicate.Cons {
	return predicate.Cons(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Cons) predicate.Cons {
	return predicate.Cons(func(s *sql.Selector) {
		p(s.Not())
	})
}
