// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hossein1376/kala/internal/ent/brand"
	"github.com/hossein1376/kala/internal/ent/category"
	"github.com/hossein1376/kala/internal/ent/comment"
	"github.com/hossein1376/kala/internal/ent/image"
	"github.com/hossein1376/kala/internal/ent/product"
	"github.com/hossein1376/kala/internal/ent/subcategory"
	"github.com/hossein1376/kala/internal/ent/user"
)

// ImageCreate is the builder for creating a Image entity.
type ImageCreate struct {
	config
	mutation *ImageMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ic *ImageCreate) SetName(s string) *ImageCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetPath sets the "path" field.
func (ic *ImageCreate) SetPath(s string) *ImageCreate {
	ic.mutation.SetPath(s)
	return ic
}

// SetCaption sets the "caption" field.
func (ic *ImageCreate) SetCaption(s string) *ImageCreate {
	ic.mutation.SetCaption(s)
	return ic
}

// SetNillableCaption sets the "caption" field if the given value is not nil.
func (ic *ImageCreate) SetNillableCaption(s *string) *ImageCreate {
	if s != nil {
		ic.SetCaption(*s)
	}
	return ic
}

// SetWidth sets the "width" field.
func (ic *ImageCreate) SetWidth(i int32) *ImageCreate {
	ic.mutation.SetWidth(i)
	return ic
}

// SetHeight sets the "height" field.
func (ic *ImageCreate) SetHeight(i int32) *ImageCreate {
	ic.mutation.SetHeight(i)
	return ic
}

// SetSizeKB sets the "size_kb" field.
func (ic *ImageCreate) SetSizeKB(f float64) *ImageCreate {
	ic.mutation.SetSizeKB(f)
	return ic
}

// SetUploadedAt sets the "uploaded_at" field.
func (ic *ImageCreate) SetUploadedAt(t time.Time) *ImageCreate {
	ic.mutation.SetUploadedAt(t)
	return ic
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (ic *ImageCreate) AddUserIDs(ids ...int) *ImageCreate {
	ic.mutation.AddUserIDs(ids...)
	return ic
}

// AddUser adds the "user" edges to the User entity.
func (ic *ImageCreate) AddUser(u ...*User) *ImageCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ic.AddUserIDs(ids...)
}

// AddCommentIDs adds the "comment" edge to the Comment entity by IDs.
func (ic *ImageCreate) AddCommentIDs(ids ...int) *ImageCreate {
	ic.mutation.AddCommentIDs(ids...)
	return ic
}

// AddComment adds the "comment" edges to the Comment entity.
func (ic *ImageCreate) AddComment(c ...*Comment) *ImageCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ic.AddCommentIDs(ids...)
}

// AddBrandIDs adds the "brand" edge to the Brand entity by IDs.
func (ic *ImageCreate) AddBrandIDs(ids ...int) *ImageCreate {
	ic.mutation.AddBrandIDs(ids...)
	return ic
}

// AddBrand adds the "brand" edges to the Brand entity.
func (ic *ImageCreate) AddBrand(b ...*Brand) *ImageCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ic.AddBrandIDs(ids...)
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (ic *ImageCreate) AddProductIDs(ids ...int) *ImageCreate {
	ic.mutation.AddProductIDs(ids...)
	return ic
}

// AddProduct adds the "product" edges to the Product entity.
func (ic *ImageCreate) AddProduct(p ...*Product) *ImageCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ic.AddProductIDs(ids...)
}

// AddCategoryIDs adds the "category" edge to the Category entity by IDs.
func (ic *ImageCreate) AddCategoryIDs(ids ...int) *ImageCreate {
	ic.mutation.AddCategoryIDs(ids...)
	return ic
}

// AddCategory adds the "category" edges to the Category entity.
func (ic *ImageCreate) AddCategory(c ...*Category) *ImageCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ic.AddCategoryIDs(ids...)
}

// AddSubCategoryIDs adds the "sub_category" edge to the SubCategory entity by IDs.
func (ic *ImageCreate) AddSubCategoryIDs(ids ...int) *ImageCreate {
	ic.mutation.AddSubCategoryIDs(ids...)
	return ic
}

// AddSubCategory adds the "sub_category" edges to the SubCategory entity.
func (ic *ImageCreate) AddSubCategory(s ...*SubCategory) *ImageCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ic.AddSubCategoryIDs(ids...)
}

// Mutation returns the ImageMutation object of the builder.
func (ic *ImageCreate) Mutation() *ImageMutation {
	return ic.mutation
}

// Save creates the Image in the database.
func (ic *ImageCreate) Save(ctx context.Context) (*Image, error) {
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ImageCreate) SaveX(ctx context.Context) *Image {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *ImageCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *ImageCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ImageCreate) check() error {
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Image.name"`)}
	}
	if v, ok := ic.mutation.Name(); ok {
		if err := image.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Image.name": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "Image.path"`)}
	}
	if v, ok := ic.mutation.Path(); ok {
		if err := image.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Image.path": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "Image.width"`)}
	}
	if v, ok := ic.mutation.Width(); ok {
		if err := image.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "Image.width": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "Image.height"`)}
	}
	if v, ok := ic.mutation.Height(); ok {
		if err := image.HeightValidator(v); err != nil {
			return &ValidationError{Name: "height", err: fmt.Errorf(`ent: validator failed for field "Image.height": %w`, err)}
		}
	}
	if _, ok := ic.mutation.SizeKB(); !ok {
		return &ValidationError{Name: "size_kb", err: errors.New(`ent: missing required field "Image.size_kb"`)}
	}
	if v, ok := ic.mutation.SizeKB(); ok {
		if err := image.SizeKBValidator(v); err != nil {
			return &ValidationError{Name: "size_kb", err: fmt.Errorf(`ent: validator failed for field "Image.size_kb": %w`, err)}
		}
	}
	if _, ok := ic.mutation.UploadedAt(); !ok {
		return &ValidationError{Name: "uploaded_at", err: errors.New(`ent: missing required field "Image.uploaded_at"`)}
	}
	return nil
}

func (ic *ImageCreate) sqlSave(ctx context.Context) (*Image, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *ImageCreate) createSpec() (*Image, *sqlgraph.CreateSpec) {
	var (
		_node = &Image{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(image.Table, sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt))
	)
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(image.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.Path(); ok {
		_spec.SetField(image.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := ic.mutation.Caption(); ok {
		_spec.SetField(image.FieldCaption, field.TypeString, value)
		_node.Caption = value
	}
	if value, ok := ic.mutation.Width(); ok {
		_spec.SetField(image.FieldWidth, field.TypeInt32, value)
		_node.Width = value
	}
	if value, ok := ic.mutation.Height(); ok {
		_spec.SetField(image.FieldHeight, field.TypeInt32, value)
		_node.Height = value
	}
	if value, ok := ic.mutation.SizeKB(); ok {
		_spec.SetField(image.FieldSizeKB, field.TypeFloat64, value)
		_node.SizeKB = value
	}
	if value, ok := ic.mutation.UploadedAt(); ok {
		_spec.SetField(image.FieldUploadedAt, field.TypeTime, value)
		_node.UploadedAt = value
	}
	if nodes := ic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.UserTable,
			Columns: image.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.CommentTable,
			Columns: image.CommentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.BrandTable,
			Columns: image.BrandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.ProductTable,
			Columns: image.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.CategoryTable,
			Columns: image.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.SubCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   image.SubCategoryTable,
			Columns: image.SubCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImageCreateBulk is the builder for creating many Image entities in bulk.
type ImageCreateBulk struct {
	config
	builders []*ImageCreate
}

// Save creates the Image entities in the database.
func (icb *ImageCreateBulk) Save(ctx context.Context) ([]*Image, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Image, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ImageCreateBulk) SaveX(ctx context.Context) []*Image {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *ImageCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *ImageCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
