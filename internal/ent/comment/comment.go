// Code generated by ent, DO NOT EDIT.

package comment

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the comment type in the database.
	Label = "comment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldLikes holds the string denoting the likes field in the database.
	FieldLikes = "likes"
	// FieldDislikes holds the string denoting the dislikes field in the database.
	FieldDislikes = "dislikes"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// FieldRatingCount holds the string denoting the rating_count field in the database.
	FieldRatingCount = "rating_count"
	// FieldVerifiedBuyer holds the string denoting the verified_buyer field in the database.
	FieldVerifiedBuyer = "verified_buyer"
	// EdgeImage holds the string denoting the image edge name in mutations.
	EdgeImage = "image"
	// EdgeCons holds the string denoting the cons edge name in mutations.
	EdgeCons = "cons"
	// EdgePros holds the string denoting the pros edge name in mutations.
	EdgePros = "pros"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// Table holds the table name of the comment in the database.
	Table = "comments"
	// ImageTable is the table that holds the image relation/edge. The primary key declared below.
	ImageTable = "comment_images"
	// ImageInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	ImageInverseTable = "images"
	// ConsTable is the table that holds the cons relation/edge.
	ConsTable = "cons"
	// ConsInverseTable is the table name for the Cons entity.
	// It exists in this package in order to avoid circular dependency with the "cons" package.
	ConsInverseTable = "cons"
	// ConsColumn is the table column denoting the cons relation/edge.
	ConsColumn = "comment"
	// ProsTable is the table that holds the pros relation/edge.
	ProsTable = "pros"
	// ProsInverseTable is the table name for the Pros entity.
	// It exists in this package in order to avoid circular dependency with the "pros" package.
	ProsInverseTable = "pros"
	// ProsColumn is the table column denoting the pros relation/edge.
	ProsColumn = "comment"
	// UserTable is the table that holds the user relation/edge. The primary key declared below.
	UserTable = "user_comments"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// ProductTable is the table that holds the product relation/edge. The primary key declared below.
	ProductTable = "product_comments"
	// ProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductInverseTable = "products"
)

// Columns holds all SQL columns for comment fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldContent,
	FieldStatus,
	FieldLikes,
	FieldDislikes,
	FieldRating,
	FieldRatingCount,
	FieldVerifiedBuyer,
}

var (
	// ImagePrimaryKey and ImageColumn2 are the table columns denoting the
	// primary key for the image relation (M2M).
	ImagePrimaryKey = []string{"comment", "image"}
	// UserPrimaryKey and UserColumn2 are the table columns denoting the
	// primary key for the user relation (M2M).
	UserPrimaryKey = []string{"user", "comment"}
	// ProductPrimaryKey and ProductColumn2 are the table columns denoting the
	// primary key for the product relation (M2M).
	ProductPrimaryKey = []string{"product_id", "comment_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// DefaultLikes holds the default value on creation for the "likes" field.
	DefaultLikes int32
	// LikesValidator is a validator for the "likes" field. It is called by the builders before save.
	LikesValidator func(int32) error
	// DefaultDislikes holds the default value on creation for the "dislikes" field.
	DefaultDislikes int32
	// DislikesValidator is a validator for the "dislikes" field. It is called by the builders before save.
	DislikesValidator func(int32) error
	// DefaultRating holds the default value on creation for the "rating" field.
	DefaultRating float64
	// RatingValidator is a validator for the "rating" field. It is called by the builders before save.
	RatingValidator func(float64) error
	// RatingCountValidator is a validator for the "rating_count" field. It is called by the builders before save.
	RatingCountValidator func(int32) error
)

// Status defines the type for the "status" enum field.
type Status string

// StatusDraft is the default value of the Status enum.
const DefaultStatus = StatusDraft

// Status values.
const (
	StatusPublished Status = "published"
	StatusDraft     Status = "draft"
	StatusDeleted   Status = "deleted"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPublished, StatusDraft, StatusDeleted:
		return nil
	default:
		return fmt.Errorf("comment: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Comment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByLikes orders the results by the likes field.
func ByLikes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikes, opts...).ToFunc()
}

// ByDislikes orders the results by the dislikes field.
func ByDislikes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDislikes, opts...).ToFunc()
}

// ByRating orders the results by the rating field.
func ByRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRating, opts...).ToFunc()
}

// ByRatingCount orders the results by the rating_count field.
func ByRatingCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRatingCount, opts...).ToFunc()
}

// ByVerifiedBuyer orders the results by the verified_buyer field.
func ByVerifiedBuyer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedBuyer, opts...).ToFunc()
}

// ByImageCount orders the results by image count.
func ByImageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImageStep(), opts...)
	}
}

// ByImage orders the results by image terms.
func ByImage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByConsCount orders the results by cons count.
func ByConsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConsStep(), opts...)
	}
}

// ByCons orders the results by cons terms.
func ByCons(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProsCount orders the results by pros count.
func ByProsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProsStep(), opts...)
	}
}

// ByPros orders the results by pros terms.
func ByPros(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserCount orders the results by user count.
func ByUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserStep(), opts...)
	}
}

// ByUser orders the results by user terms.
func ByUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductCount orders the results by product count.
func ByProductCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductStep(), opts...)
	}
}

// ByProduct orders the results by product terms.
func ByProduct(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ImageTable, ImagePrimaryKey...),
	)
}
func newConsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ConsTable, ConsColumn),
	)
}
func newProsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProsTable, ProsColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
	)
}
func newProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProductTable, ProductPrimaryKey...),
	)
}
