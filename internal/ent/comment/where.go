// Code generated by ent, DO NOT EDIT.

package comment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hossein1376/kala/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUpdateTime, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldContent, v))
}

// Likes applies equality check predicate on the "likes" field. It's identical to LikesEQ.
func Likes(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldLikes, v))
}

// Dislikes applies equality check predicate on the "dislikes" field. It's identical to DislikesEQ.
func Dislikes(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldDislikes, v))
}

// Rating applies equality check predicate on the "rating" field. It's identical to RatingEQ.
func Rating(v float64) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldRating, v))
}

// RatingCount applies equality check predicate on the "rating_count" field. It's identical to RatingCountEQ.
func RatingCount(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldRatingCount, v))
}

// VerifiedBuyer applies equality check predicate on the "verified_buyer" field. It's identical to VerifiedBuyerEQ.
func VerifiedBuyer(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldVerifiedBuyer, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldUpdateTime, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldContent, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldStatus, vs...))
}

// LikesEQ applies the EQ predicate on the "likes" field.
func LikesEQ(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldLikes, v))
}

// LikesNEQ applies the NEQ predicate on the "likes" field.
func LikesNEQ(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldLikes, v))
}

// LikesIn applies the In predicate on the "likes" field.
func LikesIn(vs ...int32) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldLikes, vs...))
}

// LikesNotIn applies the NotIn predicate on the "likes" field.
func LikesNotIn(vs ...int32) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldLikes, vs...))
}

// LikesGT applies the GT predicate on the "likes" field.
func LikesGT(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldLikes, v))
}

// LikesGTE applies the GTE predicate on the "likes" field.
func LikesGTE(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldLikes, v))
}

// LikesLT applies the LT predicate on the "likes" field.
func LikesLT(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldLikes, v))
}

// LikesLTE applies the LTE predicate on the "likes" field.
func LikesLTE(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldLikes, v))
}

// DislikesEQ applies the EQ predicate on the "dislikes" field.
func DislikesEQ(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldDislikes, v))
}

// DislikesNEQ applies the NEQ predicate on the "dislikes" field.
func DislikesNEQ(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldDislikes, v))
}

// DislikesIn applies the In predicate on the "dislikes" field.
func DislikesIn(vs ...int32) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldDislikes, vs...))
}

// DislikesNotIn applies the NotIn predicate on the "dislikes" field.
func DislikesNotIn(vs ...int32) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldDislikes, vs...))
}

// DislikesGT applies the GT predicate on the "dislikes" field.
func DislikesGT(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldDislikes, v))
}

// DislikesGTE applies the GTE predicate on the "dislikes" field.
func DislikesGTE(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldDislikes, v))
}

// DislikesLT applies the LT predicate on the "dislikes" field.
func DislikesLT(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldDislikes, v))
}

// DislikesLTE applies the LTE predicate on the "dislikes" field.
func DislikesLTE(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldDislikes, v))
}

// RatingEQ applies the EQ predicate on the "rating" field.
func RatingEQ(v float64) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldRating, v))
}

// RatingNEQ applies the NEQ predicate on the "rating" field.
func RatingNEQ(v float64) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldRating, v))
}

// RatingIn applies the In predicate on the "rating" field.
func RatingIn(vs ...float64) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldRating, vs...))
}

// RatingNotIn applies the NotIn predicate on the "rating" field.
func RatingNotIn(vs ...float64) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldRating, vs...))
}

// RatingGT applies the GT predicate on the "rating" field.
func RatingGT(v float64) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldRating, v))
}

// RatingGTE applies the GTE predicate on the "rating" field.
func RatingGTE(v float64) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldRating, v))
}

// RatingLT applies the LT predicate on the "rating" field.
func RatingLT(v float64) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldRating, v))
}

// RatingLTE applies the LTE predicate on the "rating" field.
func RatingLTE(v float64) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldRating, v))
}

// RatingCountEQ applies the EQ predicate on the "rating_count" field.
func RatingCountEQ(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldRatingCount, v))
}

// RatingCountNEQ applies the NEQ predicate on the "rating_count" field.
func RatingCountNEQ(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldRatingCount, v))
}

// RatingCountIn applies the In predicate on the "rating_count" field.
func RatingCountIn(vs ...int32) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldRatingCount, vs...))
}

// RatingCountNotIn applies the NotIn predicate on the "rating_count" field.
func RatingCountNotIn(vs ...int32) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldRatingCount, vs...))
}

// RatingCountGT applies the GT predicate on the "rating_count" field.
func RatingCountGT(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldRatingCount, v))
}

// RatingCountGTE applies the GTE predicate on the "rating_count" field.
func RatingCountGTE(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldRatingCount, v))
}

// RatingCountLT applies the LT predicate on the "rating_count" field.
func RatingCountLT(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldRatingCount, v))
}

// RatingCountLTE applies the LTE predicate on the "rating_count" field.
func RatingCountLTE(v int32) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldRatingCount, v))
}

// VerifiedBuyerEQ applies the EQ predicate on the "verified_buyer" field.
func VerifiedBuyerEQ(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldVerifiedBuyer, v))
}

// VerifiedBuyerNEQ applies the NEQ predicate on the "verified_buyer" field.
func VerifiedBuyerNEQ(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldVerifiedBuyer, v))
}

// HasImage applies the HasEdge predicate on the "image" edge.
func HasImage() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ImageTable, ImagePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImageWith applies the HasEdge predicate on the "image" edge with a given conditions (other predicates).
func HasImageWith(preds ...predicate.Image) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newImageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCons applies the HasEdge predicate on the "cons" edge.
func HasCons() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ConsTable, ConsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConsWith applies the HasEdge predicate on the "cons" edge with a given conditions (other predicates).
func HasConsWith(preds ...predicate.Cons) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newConsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPros applies the HasEdge predicate on the "pros" edge.
func HasPros() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProsTable, ProsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProsWith applies the HasEdge predicate on the "pros" edge with a given conditions (other predicates).
func HasProsWith(preds ...predicate.Pros) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newProsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProductTable, ProductPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Comment) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Comment) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Comment) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		p(s.Not())
	})
}
