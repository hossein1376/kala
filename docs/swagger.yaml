basePath: /api/v1
definitions:
  doc.createNewUserHandlerResponse:
    properties:
      data:
        $ref: '#/definitions/structure.User'
    type: object
  doc.getAllUsersHandlerResponse:
    properties:
      data:
        $ref: '#/definitions/structure.GetAllUsersResponse'
    type: object
  doc.getUserByIDHandlerResponse:
    properties:
      data:
        $ref: '#/definitions/structure.User'
    type: object
  doc.httpResponseError:
    properties:
      message:
        example: error message
        type: string
    type: object
  doc.loginHandlerResponse:
    properties:
      data:
        $ref: '#/definitions/structure.LoginResponse'
    type: object
  structure.GetAllUsersResponse:
    properties:
      current_page:
        example: 2
        type: integer
      per_page:
        example: 10
        type: integer
      total_pages:
        example: 5
        type: integer
      users:
        items:
          $ref: '#/definitions/structure.User'
        type: array
    type: object
  structure.LoginRequest:
    properties:
      password:
        example: password
        type: string
      username:
        example: username
        type: string
    type: object
  structure.LoginResponse:
    properties:
      token:
        example: random_jwt_token
        type: string
    type: object
  structure.Order:
    properties:
      id:
        type: integer
      products:
        items:
          $ref: '#/definitions/structure.Product'
        type: array
      user_id:
        type: integer
    type: object
  structure.Product:
    properties:
      available:
        type: boolean
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: integer
      quantity:
        type: integer
      rating:
        type: number
      rating_count:
        type: integer
      review:
        type: string
      status:
        type: boolean
    type: object
  structure.User:
    properties:
      email:
        example: email@email.com
        type: string
      firstname:
        example: John
        type: string
      id:
        example: 1
        type: integer
      lastname:
        example: Doe
        type: string
      orders:
        items:
          $ref: '#/definitions/structure.Order'
        type: array
      phone:
        example: "0123456789"
        type: string
      username:
        example: user
        type: string
    type: object
  structure.UserCreationRequest:
    properties:
      email:
        example: email@email.com
        type: string
      firstname:
        example: John
        type: string
      lastname:
        example: Doe
        type: string
      password:
        example: "123456"
        type: string
      phone:
        example: "0123456789"
        type: string
      username:
        example: user
        type: string
    required:
    - password
    - username
    type: object
  structure.UserUpdateRequest:
    properties:
      email:
        example: email@email.com
        type: string
      firstname:
        example: John
        type: string
      lastname:
        example: Doe
        type: string
      password:
        example: "123456"
        type: string
      phone:
        example: "0123456789"
        type: string
      username:
        example: user
        type: string
    type: object
host: localhost:8000
info:
  contact:
    name: Hossein Yazdani
    url: https://GodlyNice.ir
  description: Online shop backend.
  license:
    name: MIT license
    url: https://opensource.org/license/mit/
  title: Kala
  version: 0.1.0
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Sign-in into the application
      parameters:
      - description: user credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structure.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: single object containing JWT token
          schema:
            $ref: '#/definitions/doc.loginHandlerResponse'
        "400":
          description: bad input
          schema:
            $ref: '#/definitions/doc.httpResponseError'
        "401":
          description: not authorized
          schema:
            $ref: '#/definitions/doc.httpResponseError'
        "500":
          description: unexpected error
          schema:
            $ref: '#/definitions/doc.httpResponseError'
      summary: Login
      tags:
      - authentication
  /users:
    get:
      consumes:
      - application/json
      description: get all users
      parameters:
      - description: page number
        in: query
        name: page
        required: true
        type: integer
      - description: number of items per page
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: array of user objects
          schema:
            $ref: '#/definitions/doc.getAllUsersHandlerResponse'
        "500":
          description: unexpected error
          schema:
            $ref: '#/definitions/doc.httpResponseError'
      summary: Get all users
      tags:
      - user management
    post:
      consumes:
      - application/json
      description: creates a new user and returns the newly created data
      parameters:
      - description: user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structure.UserCreationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: single object containing user's data
          schema:
            $ref: '#/definitions/doc.createNewUserHandlerResponse'
        "400":
          description: bad input
          schema:
            $ref: '#/definitions/doc.httpResponseError'
        "500":
          description: unexpected error
          schema:
            $ref: '#/definitions/doc.httpResponseError'
      summary: Create user
      tags:
      - user management
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: delete a user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/doc.httpResponseError'
        "500":
          description: unexpected error
          schema:
            $ref: '#/definitions/doc.httpResponseError'
      summary: Delete user
      tags:
      - user management
    get:
      consumes:
      - application/json
      description: get a single user by id
      parameters:
      - description: user ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: single object containing user's data
          schema:
            $ref: '#/definitions/doc.getUserByIDHandlerResponse'
        "400":
          description: invalid ID
          schema:
            $ref: '#/definitions/doc.httpResponseError'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/doc.httpResponseError'
        "500":
          description: unexpected error
          schema:
            $ref: '#/definitions/doc.httpResponseError'
      summary: Get user
      tags:
      - user management
    patch:
      consumes:
      - application/json
      description: update a user data by its ID
      parameters:
      - description: user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structure.UserUpdateRequest'
      - description: user ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: bad input
          schema:
            $ref: '#/definitions/doc.httpResponseError'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/doc.httpResponseError'
        "500":
          description: unexpected error
          schema:
            $ref: '#/definitions/doc.httpResponseError'
      summary: Update user
      tags:
      - user management
swagger: "2.0"
